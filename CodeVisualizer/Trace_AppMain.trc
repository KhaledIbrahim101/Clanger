{
    "Name": "Trace_AppMain",
    "File": "ApplMain.c",
    "Function": "main_task",
    "Statements": [
        {
            "Text": "If(!platformInitialized[UnaryOperator])",
            "Type": "Label"
        },
        {
            "Text": "platformInitialized = 1[BinaryOperator]",
            "Type": "Binary Operator",
            "Left Side": {
                "Text": "platformInitialized[DeclRefExpr]",
                "Type": "Null"
            },
            "Operator": "=",
            "Right Side": {
                "Text": "1[ImplicitCastExpr]",
                "Type": "Null"
            }
        },
        {
            "Text": "MEM_Init()[CallExpr]",
            "Type": "Call Expression",
            "Definition File": "D:\/Work\/Projects\/all\/MemManager.h:110:13",
            "Called Function": "MEM_Init",
            "Arguments": ""
        },
        {
            "Text": "TMR_Init()[CallExpr]",
            "Type": "Call Expression",
            "Definition File": "D:\/Work\/Projects\/all\/TimersManager.h:262:6",
            "Called Function": "TMR_Init",
            "Arguments": ""
        },
        {
            "Text": "LED_Init()[CallExpr]",
            "Type": "Call Expression",
            "Definition File": "D:\/Work\/Projects\/all\/LED.h:285:15",
            "Called Function": "LED_Init",
            "Arguments": ""
        },
        {
            "Text": "SecLib_Init()[CallExpr]",
            "Type": "Call Expression",
            "Definition File": "D:\/Work\/Projects\/all\/SecLib.h:132:6",
            "Called Function": "SecLib_Init",
            "Arguments": ""
        },
        {
            "Text": "RNG_Init()[CallExpr]",
            "Type": "Call Expression",
            "Definition File": "D:\/Work\/Projects\/all\/RNG_Interface.h:85:9",
            "Called Function": "RNG_Init",
            "Arguments": ""
        },
        {
            "Text": "RNG_SetPseudoRandomNoSeed(NULL)[CallExpr]",
            "Type": "Call Expression",
            "Definition File": "D:\/Work\/Projects\/all\/RNG_Interface.h:109:6",
            "Called Function": "RNG_SetPseudoRandomNoSeed",
            "Arguments": {
                "Argument": {
                    "Text": "NULL[ImplicitCastExpr]",
                    "Type": "Null"
                }
            }
        },
        {
            "Text": "NULL[ImplicitCastExpr]",
            "Type": "Null"
        },
        {
            "Text": "pfBLE_SignalFromISR = BLE_SignalFromISRCallback[BinaryOperator]",
            "Type": "Binary Operator",
            "Left Side": {
                "Text": "pfBLE_SignalFromISR[DeclRefExpr]",
                "Type": "Null"
            },
            "Operator": "=",
            "Right Side": {
                "Text": "BLE_SignalFromISRCallback[ImplicitCastExpr]",
                "Type": "Null"
            }
        },
        {
            "Text": "Led1Flashing()[CallExpr]",
            "Type": "Call Expression",
            "Definition File": "D:\/Work\/Projects\/all\/LED.h:391:8",
            "Called Function": "LED_StartFlashWithPeriod",
            "Arguments": {
                "Argument": {
                    "Text": "[ImplicitCastExpr]",
                    "Type": "Null"
                },
                "Argument": {
                    "Text": "[ImplicitCastExpr]",
                    "Type": "Null"
                }
            }
        },
        {
            "Text": "Led2Flashing()[CallExpr]",
            "Type": "Call Expression",
            "Definition File": "D:\/Work\/Projects\/all\/LED.h:391:8",
            "Called Function": "LED_StartFlashWithPeriod",
            "Arguments": {
                "Argument": {
                    "Text": "[ImplicitCastExpr]",
                    "Type": "Null"
                },
                "Argument": {
                    "Text": "[ImplicitCastExpr]",
                    "Type": "Null"
                }
            }
        },
        {
            "Text": "Led3Flashing()[CallExpr]",
            "Type": "Call Expression",
            "Definition File": "D:\/Work\/Projects\/all\/LED.h:391:8",
            "Called Function": "LED_StartFlashWithPeriod",
            "Arguments": {
                "Argument": {
                    "Text": "[ImplicitCastExpr]",
                    "Type": "Null"
                },
                "Argument": {
                    "Text": "[ImplicitCastExpr]",
                    "Type": "Null"
                }
            }
        },
        {
            "Text": "Led4Flashing()[CallExpr]",
            "Type": "Call Expression",
            "Definition File": "D:\/Work\/Projects\/all\/LED.h:391:8",
            "Called Function": "LED_StartFlashWithPeriod",
            "Arguments": {
                "Argument": {
                    "Text": "[ImplicitCastExpr]",
                    "Type": "Null"
                },
                "Argument": {
                    "Text": "[ImplicitCastExpr]",
                    "Type": "Null"
                }
            }
        },
        {
            "Text": "BleApp_Init()[CallExpr]",
            "Type": "Call Expression",
            "Definition File": "D:\/Work\/Projects\/all\/ApplMain.c:286:13",
            "Called Function": "BleApp_Init",
            "Arguments": ""
        },
        {
            "Text": "mAppEvent = OSA_EventCreate(TRUE)[BinaryOperator]",
            "Type": "Binary Operator",
            "Left Side": {
                "Text": "mAppEvent[DeclRefExpr]",
                "Type": "Null"
            },
            "Operator": "=",
            "Right Side": {
                "Text": "OSA_EventCreate(TRUE)[CallExpr]",
                "Type": "Call Expression",
                "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:441:14",
                "Called Function": "OSA_EventCreate",
                "Arguments": {
                    "Argument": {
                        "Text": "TRUE[ImplicitCastExpr]",
                        "Type": "Null"
                    }
                }
            }
        },
        {
            "Text": "mAppEvent[DeclRefExpr]",
            "Type": "Null"
        },
        {
            "Text": "OSA_EventCreate(TRUE)[CallExpr]",
            "Type": "Call Expression",
            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:441:14",
            "Called Function": "OSA_EventCreate",
            "Arguments": {
                "Argument": {
                    "Text": "TRUE[ImplicitCastExpr]",
                    "Type": "Null"
                }
            }
        },
        {
            "Text": "If(NULL == mAppEvent[BinaryOperator])",
            "Type": "Label"
        },
        {
            "Text": "panic(0,0,0,0)[CallExpr]",
            "Type": "Call Expression",
            "Definition File": "D:\/Work\/Projects\/all\/Panic.h:82:6",
            "Called Function": "panic",
            "Arguments": {
                "Argument": {
                    "Text": "0[ImplicitCastExpr]",
                    "Type": "Null"
                },
                "Argument": {
                    "Text": "0[ImplicitCastExpr]",
                    "Type": "Null"
                },
                "Argument": {
                    "Text": "0[ImplicitCastExpr]",
                    "Type": "Null"
                },
                "Argument": {
                    "Text": "0[ImplicitCastExpr]",
                    "Type": "Null"
                }
            }
        },
        {
            "Text": "If End",
            "Type": "Label"
        },
        {
            "Text": "MSG_InitQueue(&mHostAppInputQueue)[CallExpr]",
            "Type": "Call Expression",
            "Definition File": "D:\/Work\/Projects\/all\/GenericList.h:87:6",
            "Called Function": "ListInit",
            "Arguments": {
                "Argument": {
                    "Text": "[ParenExpr]",
                    "Type": "Null"
                },
                "Argument": {
                    "Text": "[ImplicitCastExpr]",
                    "Type": "Null"
                }
            }
        },
        {
            "Text": "MSG_InitQueue(&mAppCbInputQueue)[CallExpr]",
            "Type": "Call Expression",
            "Definition File": "D:\/Work\/Projects\/all\/GenericList.h:87:6",
            "Called Function": "ListInit",
            "Arguments": {
                "Argument": {
                    "Text": "[ParenExpr]",
                    "Type": "Null"
                },
                "Argument": {
                    "Text": "[ImplicitCastExpr]",
                    "Type": "Null"
                }
            }
        },
        {
            "Text": "[ParenExpr]",
            "Type": "Null"
        },
        {
            "Text": "[ImplicitCastExpr]",
            "Type": "Null"
        },
        {
            "Text": "If(Ble_Initialize(App_GenericCallback) != gBleSuccess_c[BinaryOperator])",
            "Type": "Label"
        },
        {
            "Text": "panic(0,0,0,0)[CallExpr]",
            "Type": "Call Expression",
            "Definition File": "D:\/Work\/Projects\/all\/Panic.h:82:6",
            "Called Function": "panic",
            "Arguments": {
                "Argument": {
                    "Text": "0[ImplicitCastExpr]",
                    "Type": "Null"
                },
                "Argument": {
                    "Text": "0[ImplicitCastExpr]",
                    "Type": "Null"
                },
                "Argument": {
                    "Text": "0[ImplicitCastExpr]",
                    "Type": "Null"
                },
                "Argument": {
                    "Text": "0[ImplicitCastExpr]",
                    "Type": "Null"
                }
            }
        },
        {
            "Text": "return[ReturnStmt]",
            "Type": "Return"
        },
        {
            "Text": "If End",
            "Type": "Label"
        },
        {
            "Text": "Else Start",
            "Type": "Label"
        },
        {
            "Text": "c++;",
            "Type": "inc"
        },
        {
            "Text": "c++;",
            "Type": "inc"
        },
        {
            "Text": "Else End",
            "Type": "Label"
        },
        {
            "Text": "If End",
            "Type": "Label"
        },
        {
            "Text": "App_Thread( param )[CallExpr]",
            "Type": "Call Expression",
            "Definition File": "D:\/Work\/Projects\/all\/ApplMain.c:228:13",
            "Called Function": "App_Thread",
            "Arguments": {
                "Argument": {
                    "Text": "param[ImplicitCastExpr]",
                    "Type": "Null"
                }
            }
        }
    ],
    "Branches": [
        {
            "Name": "Trace_MEM_Init.D:\/Work\/Projects\/all\/MemManager.h:110:13",
            "File": "D:\/Work\/Projects\/all\/MemManager.h:110:13",
            "Function": "MEM_Init",
            "Statements": [
                {
                    "Text": "poolInfo_t *pPoolInfo = poolInfo;[DeclStmt]",
                    "Type": "Declaration"
                },
                {
                    "Text": "pools_t *pPools = memPools;[DeclStmt]",
                    "Type": "Declaration"
                },
                {
                    "Text": "uint8_t *pHeap = memHeap;[DeclStmt]",
                    "Type": "Declaration"
                },
                {
                    "Text": "uint16_t poolN;[DeclStmt]",
                    "Type": "Declaration"
                },
                {
                    "Text": "gFreeMessagesCount = 0[BinaryOperator]",
                    "Type": "Binary Operator",
                    "Left Side": {
                        "Text": "gFreeMessagesCount[DeclRefExpr]",
                        "Type": "Null"
                    },
                    "Operator": "=",
                    "Right Side": {
                        "Text": "0[ImplicitCastExpr]",
                        "Type": "Null"
                    }
                },
                {
                    "Text": "gFreeMessagesCount[DeclRefExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "0[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "empty",
                    "Type": "Unhandled"
                },
                {
                    "Text": "empty",
                    "Type": "Unhandled"
                },
                {
                    "Text": "For Start",
                    "Type": "Label"
                },
                {
                    "Text": "poolN = pPoolInfo->poolSize[BinaryOperator]",
                    "Type": "Binary Operator",
                    "Left Side": {
                        "Text": "poolN[DeclRefExpr]",
                        "Type": "Null"
                    },
                    "Operator": "=",
                    "Right Side": {
                        "Text": "pPoolInfo->poolSize[ImplicitCastExpr]",
                        "Type": "Null"
                    }
                },
                {
                    "Text": "poolN[DeclRefExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "pPoolInfo->poolSize[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "ListInit((listHandle_t)&pPools->anchor, poolN)[CallExpr]",
                    "Type": "Call Expression",
                    "Definition File": "D:\/Work\/Projects\/all\/GenericList.h:87:6",
                    "Called Function": "ListInit",
                    "Arguments": {
                        "Argument": {
                            "Text": "(listHandle_t)&pPools->anchor[CStyleCastExpr]",
                            "Type": "Null"
                        },
                        "Argument": {
                            "Text": "poolN[ImplicitCastExpr]",
                            "Type": "Null"
                        }
                    }
                },
                {
                    "Text": "(listHandle_t)&pPools->anchor[CStyleCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "poolN[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "poolN[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "While Start",
                    "Type": "Label"
                },
                {
                    "Text": "ListAddTail((listHandle_t)&pPools->anchor, (listElementHandle_t)&((listHeader_t *)pHeap)->link)[CallExpr]",
                    "Type": "Call Expression",
                    "Definition File": "D:\/Work\/Projects\/all\/GenericList.h:90:14",
                    "Called Function": "ListAddTail",
                    "Arguments": {
                        "Argument": {
                            "Text": "(listHandle_t)&pPools->anchor[CStyleCastExpr]",
                            "Type": "Null"
                        },
                        "Argument": {
                            "Text": "(listElementHandle_t)&((listHeader_t *)pHeap)->link[CStyleCastExpr]",
                            "Type": "Null"
                        }
                    }
                },
                {
                    "Text": "(listHandle_t)&pPools->anchor[CStyleCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "(listElementHandle_t)&((listHeader_t *)pHeap)->link[CStyleCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "((listHeader_t *)pHeap)->pParentPool = pPools[BinaryOperator]",
                    "Type": "Binary Operator",
                    "Left Side": {
                        "Text": "((listHeader_t *)pHeap)->pParentPool[MemberExpr]",
                        "Type": "Null"
                    },
                    "Operator": "=",
                    "Right Side": {
                        "Text": "pPools[ImplicitCastExpr]",
                        "Type": "Null"
                    }
                },
                {
                    "Text": "((listHeader_t *)pHeap)->pParentPool[MemberExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "pPools[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "pPools->numBlocks++[UnaryOperator]",
                    "Type": "Null"
                },
                {
                    "Text": "gFreeMessagesCount++[UnaryOperator]",
                    "Type": "Null"
                },
                {
                    "Text": "pHeap += pPoolInfo->blockSize + sizeof(listHeader_t)[CompoundAssignOperator]",
                    "Type": "Null"
                },
                {
                    "Text": "poolN--[UnaryOperator]",
                    "Type": "Null"
                },
                {
                    "Text": "While End",
                    "Type": "Label"
                },
                {
                    "Text": "pPools->blockSize = pPoolInfo->blockSize[BinaryOperator]",
                    "Type": "Binary Operator",
                    "Left Side": {
                        "Text": "pPools->blockSize[MemberExpr]",
                        "Type": "Null"
                    },
                    "Operator": "=",
                    "Right Side": {
                        "Text": "pPoolInfo->blockSize[ImplicitCastExpr]",
                        "Type": "Null"
                    }
                },
                {
                    "Text": "pPools->blockSize[MemberExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "pPoolInfo->blockSize[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "pPools->poolId = pPoolInfo->poolId[BinaryOperator]",
                    "Type": "Binary Operator",
                    "Left Side": {
                        "Text": "pPools->poolId[MemberExpr]",
                        "Type": "Null"
                    },
                    "Operator": "=",
                    "Right Side": {
                        "Text": "pPoolInfo->poolId[ImplicitCastExpr]",
                        "Type": "Null"
                    }
                },
                {
                    "Text": "pPools->poolId[MemberExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "pPoolInfo->poolId[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "pPools->nextBlockSize = (pPoolInfo+1)->blockSize[BinaryOperator]",
                    "Type": "Binary Operator",
                    "Left Side": {
                        "Text": "pPools->nextBlockSize[MemberExpr]",
                        "Type": "Null"
                    },
                    "Operator": "=",
                    "Right Side": {
                        "Text": "(pPoolInfo+1)->blockSize[ImplicitCastExpr]",
                        "Type": "Null"
                    }
                },
                {
                    "Text": "pPools->nextBlockSize[MemberExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "(pPoolInfo+1)->blockSize[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "If(pPools->nextBlockSize == 0[BinaryOperator])",
                    "Type": "Label"
                },
                {
                    "Text": "break[BreakStmt]",
                    "Type": "Break"
                },
                {
                    "Text": "If End",
                    "Type": "Label"
                },
                {
                    "Text": "Else Start",
                    "Type": "Label"
                },
                {
                    "Text": "Else End",
                    "Type": "Label"
                },
                {
                    "Text": "pPools++[UnaryOperator]",
                    "Type": "Null"
                },
                {
                    "Text": "pPoolInfo++[UnaryOperator]",
                    "Type": "Null"
                },
                {
                    "Text": "empty",
                    "Type": "Unhandled"
                },
                {
                    "Text": "For End",
                    "Type": "Label"
                },
                {
                    "Text": "return MEM_SUCCESS_c[ReturnStmt]",
                    "Type": "Return"
                }
            ],
            "Branches": [
                {
                    "Name": "Trace_ListInit.D:\/Work\/Projects\/all\/GenericList.h:87:6",
                    "File": "D:\/Work\/Projects\/all\/GenericList.h:87:6",
                    "Function": "ListInit",
                    "Statements": [
                        {
                            "Text": "list->head = NULL[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "list->head[MemberExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "NULL[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "list->head[MemberExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "NULL[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "list->tail = NULL[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "list->tail[MemberExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "NULL[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "list->tail[MemberExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "NULL[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "list->max = max[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "list->max[MemberExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "max[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "list->max[MemberExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "max[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "list->size = 0[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "list->size[MemberExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "0[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "list->size[MemberExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "0[ImplicitCastExpr]",
                            "Type": "Null"
                        }
                    ],
                    "Branches": ""
                },
                {
                    "Name": "Trace_ListAddTail.D:\/Work\/Projects\/all\/GenericList.h:90:14",
                    "File": "D:\/Work\/Projects\/all\/GenericList.h:90:14",
                    "Function": "ListAddTail",
                    "Statements": [
                        {
                            "Text": "OSA_InterruptDisable()[CallExpr]",
                            "Type": "Call Expression",
                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:570:6",
                            "Called Function": "OSA_InterruptDisable",
                            "Arguments": ""
                        },
                        {
                            "Text": "If((list->max != 0) && (list->max == list->size)[BinaryOperator])",
                            "Type": "Label"
                        },
                        {
                            "Text": "OSA_InterruptEnable()[CallExpr]",
                            "Type": "Call Expression",
                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                            "Called Function": "OSA_InterruptEnable",
                            "Arguments": ""
                        },
                        {
                            "Text": "return gListFull_c[ReturnStmt]",
                            "Type": "Return"
                        },
                        {
                            "Text": "If End",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else Start",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else End",
                            "Type": "Label"
                        },
                        {
                            "Text": "If(list->size == 0[BinaryOperator])",
                            "Type": "Label"
                        },
                        {
                            "Text": "list->head = element[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "list->head[MemberExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "element[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "list->head[MemberExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "element[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "If End",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else Start",
                            "Type": "Label"
                        },
                        {
                            "Text": "list->tail->next = element[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "list->tail->next[MemberExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "element[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "list->tail->next[MemberExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "element[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "Else End",
                            "Type": "Label"
                        },
                        {
                            "Text": "element->prev = list->tail[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "element->prev[MemberExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "list->tail[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "element->prev[MemberExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "list->tail[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "element->next = NULL[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "element->next[MemberExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "NULL[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "element->next[MemberExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "NULL[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "element->list = list[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "element->list[MemberExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "list[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "element->list[MemberExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "list[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "list->tail = element[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "list->tail[MemberExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "element[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "list->tail[MemberExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "element[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "list->size++[UnaryOperator]",
                            "Type": "Null"
                        },
                        {
                            "Text": "OSA_InterruptEnable()[CallExpr]",
                            "Type": "Call Expression",
                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                            "Called Function": "OSA_InterruptEnable",
                            "Arguments": ""
                        },
                        {
                            "Text": "return gListOk_c[ReturnStmt]",
                            "Type": "Return"
                        }
                    ],
                    "Branches": [
                        {
                            "Name": "Trace_OSA_InterruptDisable.D:\/Work\/Projects\/all\/fsl_os_abstraction.h:570:6",
                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:570:6",
                            "Function": "OSA_InterruptDisable",
                            "Statements": [
                                {
                                    "Text": "OSA_DisableIRQGlobal()[CallExpr]",
                                    "Type": "Call Expression",
                                    "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:232:6",
                                    "Called Function": "OSA_DisableIRQGlobal",
                                    "Arguments": ""
                                }
                            ],
                            "Branches": [
                                {
                                    "Name": "Trace_OSA_DisableIRQGlobal.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:232:6",
                                    "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:232:6",
                                    "Function": "OSA_DisableIRQGlobal",
                                    "Statements": [
                                        {
                                            "Text": "__disable_irq()[CallExpr]",
                                            "Type": "Call Expression",
                                            "Definition File": "D:\/Work\/Projects\/all\/fsl_common.h:405:5",
                                            "Called Function": "__disable_irq",
                                            "Arguments": ""
                                        },
                                        {
                                            "Text": "gInterruptDisableCount++[UnaryOperator]",
                                            "Type": "Null"
                                        }
                                    ],
                                    "Branches": [
                                        {
                                            "Name": "Trace___disable_irq.D:\/Work\/Projects\/all\/fsl_common.h:405:5",
                                            "File": "D:\/Work\/Projects\/all\/fsl_common.h:405:5",
                                            "Function": "__disable_irq",
                                            "Statements": "",
                                            "Branches": ""
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "Name": "Trace_OSA_InterruptEnable.D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                            "Function": "OSA_InterruptEnable",
                            "Statements": [
                                {
                                    "Text": "OSA_EnableIRQGlobal()[CallExpr]",
                                    "Type": "Call Expression",
                                    "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                    "Called Function": "OSA_EnableIRQGlobal",
                                    "Arguments": ""
                                }
                            ],
                            "Branches": [
                                {
                                    "Name": "Trace_OSA_EnableIRQGlobal.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                    "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                    "Function": "OSA_EnableIRQGlobal",
                                    "Statements": [
                                        {
                                            "Text": "If(gInterruptDisableCount > 0[BinaryOperator])",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "gInterruptDisableCount--[UnaryOperator]",
                                            "Type": "Null"
                                        },
                                        {
                                            "Text": "If(gInterruptDisableCount == 0[BinaryOperator])",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "__enable_irq()[CallExpr]",
                                            "Type": "Call Expression",
                                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                            "Called Function": "__enable_irq",
                                            "Arguments": ""
                                        },
                                        {
                                            "Text": "If End",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else Start",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else End",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "If End",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else Start",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else End",
                                            "Type": "Label"
                                        }
                                    ],
                                    "Branches": [
                                        {
                                            "Name": "Trace___enable_irq.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                            "Function": "__enable_irq",
                                            "Statements": "",
                                            "Branches": ""
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "Name": "Trace_OSA_InterruptEnable.D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                            "Function": "OSA_InterruptEnable",
                            "Statements": [
                                {
                                    "Text": "OSA_EnableIRQGlobal()[CallExpr]",
                                    "Type": "Call Expression",
                                    "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                    "Called Function": "OSA_EnableIRQGlobal",
                                    "Arguments": ""
                                }
                            ],
                            "Branches": [
                                {
                                    "Name": "Trace_OSA_EnableIRQGlobal.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                    "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                    "Function": "OSA_EnableIRQGlobal",
                                    "Statements": [
                                        {
                                            "Text": "If(gInterruptDisableCount > 0[BinaryOperator])",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "gInterruptDisableCount--[UnaryOperator]",
                                            "Type": "Null"
                                        },
                                        {
                                            "Text": "If(gInterruptDisableCount == 0[BinaryOperator])",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "__enable_irq()[CallExpr]",
                                            "Type": "Call Expression",
                                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                            "Called Function": "__enable_irq",
                                            "Arguments": ""
                                        },
                                        {
                                            "Text": "If End",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else Start",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else End",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "If End",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else Start",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else End",
                                            "Type": "Label"
                                        }
                                    ],
                                    "Branches": [
                                        {
                                            "Name": "Trace___enable_irq.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                            "Function": "__enable_irq",
                                            "Statements": "",
                                            "Branches": ""
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "Name": "Trace_TMR_Init.D:\/Work\/Projects\/all\/TimersManager.h:262:6",
            "File": "D:\/Work\/Projects\/all\/TimersManager.h:262:6",
            "Function": "TMR_Init",
            "Statements": [
                {
                    "Text": "static uint8_t initialized = FALSE;[DeclStmt]",
                    "Type": "Declaration"
                },
                {
                    "Text": "If(!initialized[UnaryOperator])",
                    "Type": "Label"
                },
                {
                    "Text": "initialized = TRUE[BinaryOperator]",
                    "Type": "Binary Operator",
                    "Left Side": {
                        "Text": "initialized[DeclRefExpr]",
                        "Type": "Null"
                    },
                    "Operator": "=",
                    "Right Side": {
                        "Text": "TRUE[ImplicitCastExpr]",
                        "Type": "Null"
                    }
                },
                {
                    "Text": "initialized[DeclRefExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "TRUE[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "StackTimer_Init(StackTimer_ISR)[CallExpr]",
                    "Type": "Call Expression",
                    "Definition File": "D:\/Work\/Projects\/all\/TMR_Adapter.h:107:6",
                    "Called Function": "StackTimer_Init",
                    "Arguments": {
                        "Argument": {
                            "Text": "StackTimer_ISR[ImplicitCastExpr]",
                            "Type": "Null"
                        }
                    }
                },
                {
                    "Text": "StackTimer_ISR[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "TMR_NotifyClkChanged()[CallExpr]",
                    "Type": "Call Expression",
                    "Definition File": "D:\/Work\/Projects\/all\/TimersManager.h:271:6",
                    "Called Function": "TMR_NotifyClkChanged",
                    "Arguments": ""
                },
                {
                    "Text": "osaTaskId_t timerThreadId;[DeclStmt]",
                    "Type": "Declaration"
                },
                {
                    "Text": "mTimerThreadEventId = OSA_EventCreate(TRUE)[BinaryOperator]",
                    "Type": "Binary Operator",
                    "Left Side": {
                        "Text": "mTimerThreadEventId[DeclRefExpr]",
                        "Type": "Null"
                    },
                    "Operator": "=",
                    "Right Side": {
                        "Text": "OSA_EventCreate(TRUE)[CallExpr]",
                        "Type": "Call Expression",
                        "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:441:14",
                        "Called Function": "OSA_EventCreate",
                        "Arguments": {
                            "Argument": {
                                "Text": "TRUE[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        }
                    }
                },
                {
                    "Text": "mTimerThreadEventId[DeclRefExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "OSA_EventCreate(TRUE)[CallExpr]",
                    "Type": "Call Expression",
                    "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:441:14",
                    "Called Function": "OSA_EventCreate",
                    "Arguments": {
                        "Argument": {
                            "Text": "TRUE[ImplicitCastExpr]",
                            "Type": "Null"
                        }
                    }
                },
                {
                    "Text": "TRUE[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "If(NULL == mTimerThreadEventId[BinaryOperator])",
                    "Type": "Label"
                },
                {
                    "Text": "panic( 0, (uint32_t)TMR_Init, 0, 0 )[CallExpr]",
                    "Type": "Call Expression",
                    "Definition File": "D:\/Work\/Projects\/all\/Panic.h:82:6",
                    "Called Function": "panic",
                    "Arguments": {
                        "Argument": {
                            "Text": "0[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        "Argument": {
                            "Text": "(uint32_t)TMR_Init[CStyleCastExpr]",
                            "Type": "Null"
                        },
                        "Argument": {
                            "Text": "0[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        "Argument": {
                            "Text": "0[ImplicitCastExpr]",
                            "Type": "Null"
                        }
                    }
                },
                {
                    "Text": "0[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "(uint32_t)TMR_Init[CStyleCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "0[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "0[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "If End",
                    "Type": "Label"
                },
                {
                    "Text": "Else Start",
                    "Type": "Label"
                },
                {
                    "Text": "timerThreadId = OSA_TaskCreate(OSA_TASK(TMR_Task), NULL)[BinaryOperator]",
                    "Type": "Binary Operator",
                    "Left Side": {
                        "Text": "timerThreadId[DeclRefExpr]",
                        "Type": "Null"
                    },
                    "Operator": "=",
                    "Right Side": {
                        "Text": "OSA_TaskCreate(OSA_TASK(TMR_Task), NULL)[CallExpr]",
                        "Type": "Call Expression",
                        "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:269:13",
                        "Called Function": "OSA_TaskCreate",
                        "Arguments": {
                            "Argument": {
                                "Text": "OSA_TASK(TMR_Task)[UnaryOperator]",
                                "Type": "Null"
                            },
                            "Argument": {
                                "Text": "NULL[ParenExpr]",
                                "Type": "Null"
                            }
                        }
                    }
                },
                {
                    "Text": "timerThreadId[DeclRefExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "OSA_TaskCreate(OSA_TASK(TMR_Task), NULL)[CallExpr]",
                    "Type": "Call Expression",
                    "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:269:13",
                    "Called Function": "OSA_TaskCreate",
                    "Arguments": {
                        "Argument": {
                            "Text": "OSA_TASK(TMR_Task)[UnaryOperator]",
                            "Type": "Null"
                        },
                        "Argument": {
                            "Text": "NULL[ParenExpr]",
                            "Type": "Null"
                        }
                    }
                },
                {
                    "Text": "OSA_TASK(TMR_Task)[UnaryOperator]",
                    "Type": "Null"
                },
                {
                    "Text": "NULL[ParenExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "If(NULL == timerThreadId[BinaryOperator])",
                    "Type": "Label"
                },
                {
                    "Text": "panic( 0, (uint32_t)TMR_Init, 0, 0 )[CallExpr]",
                    "Type": "Call Expression",
                    "Definition File": "D:\/Work\/Projects\/all\/Panic.h:82:6",
                    "Called Function": "panic",
                    "Arguments": {
                        "Argument": {
                            "Text": "0[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        "Argument": {
                            "Text": "(uint32_t)TMR_Init[CStyleCastExpr]",
                            "Type": "Null"
                        },
                        "Argument": {
                            "Text": "0[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        "Argument": {
                            "Text": "0[ImplicitCastExpr]",
                            "Type": "Null"
                        }
                    }
                },
                {
                    "Text": "0[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "(uint32_t)TMR_Init[CStyleCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "0[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "0[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "If End",
                    "Type": "Label"
                },
                {
                    "Text": "Else Start",
                    "Type": "Label"
                },
                {
                    "Text": "Else End",
                    "Type": "Label"
                },
                {
                    "Text": "Else End",
                    "Type": "Label"
                },
                {
                    "Text": "If End",
                    "Type": "Label"
                },
                {
                    "Text": "Else Start",
                    "Type": "Label"
                },
                {
                    "Text": "Else End",
                    "Type": "Label"
                }
            ],
            "Branches": [
                {
                    "Name": "Trace_StackTimer_Init.D:\/Work\/Projects\/all\/TMR_Adapter.h:107:6",
                    "File": "D:\/Work\/Projects\/all\/TMR_Adapter.h:107:6",
                    "Function": "StackTimer_Init",
                    "Statements": "",
                    "Branches": ""
                },
                {
                    "Name": "Trace_TMR_NotifyClkChanged.D:\/Work\/Projects\/all\/TimersManager.h:271:6",
                    "File": "D:\/Work\/Projects\/all\/TimersManager.h:271:6",
                    "Function": "TMR_NotifyClkChanged",
                    "Statements": [
                        {
                            "Text": "mCounterFreqHz = (uint32_t)((StackTimer_GetInputFrequency()))[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "mCounterFreqHz[DeclRefExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "(uint32_t)((StackTimer_GetInputFrequency()))[CStyleCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "mCounterFreqHz[DeclRefExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "(uint32_t)((StackTimer_GetInputFrequency()))[CStyleCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "mMaxToCountDown_c = gStackTimerMaxCountValue_c - TmrTicksFromMilliseconds(8)[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "mMaxToCountDown_c[DeclRefExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "gStackTimerMaxCountValue_c - TmrTicksFromMilliseconds(8)[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "mMaxToCountDown_c[DeclRefExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "gStackTimerMaxCountValue_c - TmrTicksFromMilliseconds(8)[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "mTicksFor4ms = TmrTicksFromMilliseconds(4)[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "mTicksFor4ms[DeclRefExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "TmrTicksFromMilliseconds(4)[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "mTicksFor4ms[DeclRefExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "TmrTicksFromMilliseconds(4)[ImplicitCastExpr]",
                            "Type": "Null"
                        }
                    ],
                    "Branches": ""
                },
                {
                    "Name": "Trace_OSA_EventCreate.D:\/Work\/Projects\/all\/fsl_os_abstraction.h:441:14",
                    "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:441:14",
                    "Function": "OSA_EventCreate",
                    "Statements": [
                        {
                            "Text": "osaEventId_t eventId;[DeclStmt]",
                            "Type": "Declaration"
                        },
                        {
                            "Text": "osEventStruct_t* pEventStruct;[DeclStmt]",
                            "Type": "Declaration"
                        },
                        {
                            "Text": "OSA_InterruptDisable()[CallExpr]",
                            "Type": "Call Expression",
                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:570:6",
                            "Called Function": "OSA_InterruptDisable",
                            "Arguments": ""
                        },
                        {
                            "Text": "eventId = pEventStruct = osObjectAlloc(&osEventInfo)[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "eventId[DeclRefExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "pEventStruct = osObjectAlloc(&osEventInfo)[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "eventId[DeclRefExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "pEventStruct = osObjectAlloc(&osEventInfo)[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "OSA_InterruptEnable()[CallExpr]",
                            "Type": "Call Expression",
                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                            "Called Function": "OSA_InterruptEnable",
                            "Arguments": ""
                        },
                        {
                            "Text": "If(eventId == NULL[BinaryOperator])",
                            "Type": "Label"
                        },
                        {
                            "Text": "return NULL[ReturnStmt]",
                            "Type": "Return"
                        },
                        {
                            "Text": "If End",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else Start",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else End",
                            "Type": "Label"
                        },
                        {
                            "Text": "pEventStruct->event.flags     = 0[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "pEventStruct->event.flags[MemberExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "0[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "pEventStruct->event.flags[MemberExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "0[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "pEventStruct->event.autoClear = autoClear[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "pEventStruct->event.autoClear[MemberExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "autoClear[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "pEventStruct->event.autoClear[MemberExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "autoClear[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "pEventStruct->event.time_start = 0u[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "pEventStruct->event.time_start[MemberExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "0u[IntegerLiteral]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "pEventStruct->event.time_start[MemberExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "0u[IntegerLiteral]",
                            "Type": "Null"
                        },
                        {
                            "Text": "pEventStruct->event.timeout = 0u[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "pEventStruct->event.timeout[MemberExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "0u[IntegerLiteral]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "pEventStruct->event.timeout[MemberExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "0u[IntegerLiteral]",
                            "Type": "Null"
                        },
                        {
                            "Text": "pEventStruct->event.waitingTask = NULL[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "pEventStruct->event.waitingTask[MemberExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "NULL[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "pEventStruct->event.waitingTask[MemberExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "NULL[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "return eventId[ReturnStmt]",
                            "Type": "Return"
                        }
                    ],
                    "Branches": [
                        {
                            "Name": "Trace_OSA_InterruptDisable.D:\/Work\/Projects\/all\/fsl_os_abstraction.h:570:6",
                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:570:6",
                            "Function": "OSA_InterruptDisable",
                            "Statements": [
                                {
                                    "Text": "OSA_DisableIRQGlobal()[CallExpr]",
                                    "Type": "Call Expression",
                                    "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:232:6",
                                    "Called Function": "OSA_DisableIRQGlobal",
                                    "Arguments": ""
                                }
                            ],
                            "Branches": [
                                {
                                    "Name": "Trace_OSA_DisableIRQGlobal.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:232:6",
                                    "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:232:6",
                                    "Function": "OSA_DisableIRQGlobal",
                                    "Statements": [
                                        {
                                            "Text": "__disable_irq()[CallExpr]",
                                            "Type": "Call Expression",
                                            "Definition File": "D:\/Work\/Projects\/all\/fsl_common.h:405:5",
                                            "Called Function": "__disable_irq",
                                            "Arguments": ""
                                        },
                                        {
                                            "Text": "gInterruptDisableCount++[UnaryOperator]",
                                            "Type": "Null"
                                        }
                                    ],
                                    "Branches": [
                                        {
                                            "Name": "Trace___disable_irq.D:\/Work\/Projects\/all\/fsl_common.h:405:5",
                                            "File": "D:\/Work\/Projects\/all\/fsl_common.h:405:5",
                                            "Function": "__disable_irq",
                                            "Statements": "",
                                            "Branches": ""
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "Name": "Trace_OSA_InterruptEnable.D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                            "Function": "OSA_InterruptEnable",
                            "Statements": [
                                {
                                    "Text": "OSA_EnableIRQGlobal()[CallExpr]",
                                    "Type": "Call Expression",
                                    "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                    "Called Function": "OSA_EnableIRQGlobal",
                                    "Arguments": ""
                                }
                            ],
                            "Branches": [
                                {
                                    "Name": "Trace_OSA_EnableIRQGlobal.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                    "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                    "Function": "OSA_EnableIRQGlobal",
                                    "Statements": [
                                        {
                                            "Text": "If(gInterruptDisableCount > 0[BinaryOperator])",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "gInterruptDisableCount--[UnaryOperator]",
                                            "Type": "Null"
                                        },
                                        {
                                            "Text": "If(gInterruptDisableCount == 0[BinaryOperator])",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "__enable_irq()[CallExpr]",
                                            "Type": "Call Expression",
                                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                            "Called Function": "__enable_irq",
                                            "Arguments": ""
                                        },
                                        {
                                            "Text": "If End",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else Start",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else End",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "If End",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else Start",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else End",
                                            "Type": "Label"
                                        }
                                    ],
                                    "Branches": [
                                        {
                                            "Name": "Trace___enable_irq.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                            "Function": "__enable_irq",
                                            "Statements": "",
                                            "Branches": ""
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "Name": "Trace_panic.D:\/Work\/Projects\/all\/Panic.h:82:6",
                    "File": "D:\/Work\/Projects\/all\/Panic.h:82:6",
                    "Function": "panic",
                    "Statements": "",
                    "Branches": ""
                },
                {
                    "Name": "Trace_OSA_TaskCreate.D:\/Work\/Projects\/all\/fsl_os_abstraction.h:269:13",
                    "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:269:13",
                    "Function": "OSA_TaskCreate",
                    "Statements": [
                        {
                            "Text": "osaTaskId_t taskId = NULL;[DeclStmt]",
                            "Type": "Declaration"
                        },
                        {
                            "Text": "task_control_block_t *p_newTaskControlBlock;[DeclStmt]",
                            "Type": "Declaration"
                        },
                        {
                            "Text": "task_control_block_t *p_currentTaskControlBlock;[DeclStmt]",
                            "Type": "Declaration"
                        },
                        {
                            "Text": "If(g_freeTaskControlBlock[ImplicitCastExpr])",
                            "Type": "Label"
                        },
                        {
                            "Text": "p_newTaskControlBlock         = g_freeTaskControlBlock[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "p_newTaskControlBlock[DeclRefExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "g_freeTaskControlBlock[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "p_newTaskControlBlock[DeclRefExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "g_freeTaskControlBlock[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "g_freeTaskControlBlock        = g_freeTaskControlBlock->next[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "g_freeTaskControlBlock[DeclRefExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "g_freeTaskControlBlock->next[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "g_freeTaskControlBlock[DeclRefExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "g_freeTaskControlBlock->next[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "p_newTaskControlBlock->p_func = thread_def->pthread[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "p_newTaskControlBlock->p_func[MemberExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "thread_def->pthread[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "p_newTaskControlBlock->p_func[MemberExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "thread_def->pthread[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "p_newTaskControlBlock->priority = PRIORITY_OSA_TO_RTOS(thread_def->tpriority)[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "p_newTaskControlBlock->priority[MemberExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "PRIORITY_OSA_TO_RTOS(thread_def->tpriority)[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "p_newTaskControlBlock->priority[MemberExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "PRIORITY_OSA_TO_RTOS(thread_def->tpriority)[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "p_newTaskControlBlock->param  = task_param[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "p_newTaskControlBlock->param[MemberExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "task_param[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "p_newTaskControlBlock->param[MemberExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "task_param[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "p_newTaskControlBlock->next = NULL[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "p_newTaskControlBlock->next[MemberExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "NULL[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "p_newTaskControlBlock->next[MemberExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "NULL[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "p_newTaskControlBlock->prev = NULL[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "p_newTaskControlBlock->prev[MemberExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "NULL[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "p_newTaskControlBlock->prev[MemberExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "NULL[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "If(p_taskListHead == NULL[BinaryOperator])",
                            "Type": "Label"
                        },
                        {
                            "Text": "p_taskListHead = p_newTaskControlBlock[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "p_taskListHead[DeclRefExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "p_newTaskControlBlock[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "p_taskListHead[DeclRefExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "p_newTaskControlBlock[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "p_taskListHead->next = p_taskListHead[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "p_taskListHead->next[MemberExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "p_taskListHead[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "p_taskListHead->next[MemberExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "p_taskListHead[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "p_taskListHead->prev = p_taskListHead[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "p_taskListHead->prev[MemberExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "p_taskListHead[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "p_taskListHead->prev[MemberExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "p_taskListHead[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "If End",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else Start",
                            "Type": "Label"
                        },
                        {
                            "Text": "p_newTaskControlBlock->priority <= p_taskListHead->priority[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "p_newTaskControlBlock->priority[ImplicitCastExpr]",
                                "Type": "Null"
                            },
                            "Operator": "<=",
                            "Right Side": {
                                "Text": "p_taskListHead->priority[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "p_newTaskControlBlock->priority[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "p_taskListHead->priority[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "OSA_InsertTaskBefore(p_newTaskControlBlock, p_taskListHead)[CallExpr]",
                            "Type": "Call Expression",
                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:139:13",
                            "Called Function": "OSA_InsertTaskBefore",
                            "Arguments": {
                                "Argument": {
                                    "Text": "p_newTaskControlBlock[ImplicitCastExpr]",
                                    "Type": "Null"
                                },
                                "Argument": {
                                    "Text": "p_taskListHead[ImplicitCastExpr]",
                                    "Type": "Null"
                                }
                            }
                        },
                        {
                            "Text": "p_newTaskControlBlock[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "p_taskListHead[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "p_taskListHead = p_newTaskControlBlock[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "p_taskListHead[DeclRefExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "p_newTaskControlBlock[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "p_taskListHead[DeclRefExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "p_newTaskControlBlock[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "If(p_newTaskControlBlock->priority >= p_taskListHead->prev->priority[BinaryOperator])",
                            "Type": "Label"
                        },
                        {
                            "Text": "OSA_InsertTaskBefore(p_newTaskControlBlock, p_taskListHead)[CallExpr]",
                            "Type": "Call Expression",
                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:139:13",
                            "Called Function": "OSA_InsertTaskBefore",
                            "Arguments": {
                                "Argument": {
                                    "Text": "p_newTaskControlBlock[ImplicitCastExpr]",
                                    "Type": "Null"
                                },
                                "Argument": {
                                    "Text": "p_taskListHead[ImplicitCastExpr]",
                                    "Type": "Null"
                                }
                            }
                        },
                        {
                            "Text": "p_newTaskControlBlock[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "p_taskListHead[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "If End",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else Start",
                            "Type": "Label"
                        },
                        {
                            "Text": "p_currentTaskControlBlock = p_taskListHead->next[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "p_currentTaskControlBlock[DeclRefExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "p_taskListHead->next[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "p_currentTaskControlBlock[DeclRefExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "p_taskListHead->next[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "p_currentTaskControlBlock != p_taskListHead[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "p_currentTaskControlBlock[ImplicitCastExpr]",
                                "Type": "Null"
                            },
                            "Operator": "!=",
                            "Right Side": {
                                "Text": "p_taskListHead[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "p_currentTaskControlBlock[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "p_taskListHead[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "While Start",
                            "Type": "Label"
                        },
                        {
                            "Text": "If(p_newTaskControlBlock->priority <= p_currentTaskControlBlock->priority[BinaryOperator])",
                            "Type": "Label"
                        },
                        {
                            "Text": "OSA_InsertTaskBefore(p_newTaskControlBlock, p_currentTaskControlBlock)[CallExpr]",
                            "Type": "Call Expression",
                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:139:13",
                            "Called Function": "OSA_InsertTaskBefore",
                            "Arguments": {
                                "Argument": {
                                    "Text": "p_newTaskControlBlock[ImplicitCastExpr]",
                                    "Type": "Null"
                                },
                                "Argument": {
                                    "Text": "p_currentTaskControlBlock[ImplicitCastExpr]",
                                    "Type": "Null"
                                }
                            }
                        },
                        {
                            "Text": "p_newTaskControlBlock[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "p_currentTaskControlBlock[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "break[BreakStmt]",
                            "Type": "Break"
                        },
                        {
                            "Text": "If End",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else Start",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else End",
                            "Type": "Label"
                        },
                        {
                            "Text": "p_currentTaskControlBlock = p_currentTaskControlBlock->next[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "p_currentTaskControlBlock[DeclRefExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "p_currentTaskControlBlock->next[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "p_currentTaskControlBlock[DeclRefExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "p_currentTaskControlBlock->next[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "While End",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else End",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else End",
                            "Type": "Label"
                        },
                        {
                            "Text": "taskId = (osaTaskId_t)p_newTaskControlBlock[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "taskId[DeclRefExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "(osaTaskId_t)p_newTaskControlBlock[CStyleCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "taskId[DeclRefExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "(osaTaskId_t)p_newTaskControlBlock[CStyleCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "If End",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else Start",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else End",
                            "Type": "Label"
                        },
                        {
                            "Text": "return taskId[ReturnStmt]",
                            "Type": "Return"
                        }
                    ],
                    "Branches": [
                        {
                            "Name": "Trace_OSA_InsertTaskBefore.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:139:13",
                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:139:13",
                            "Function": "OSA_InsertTaskBefore",
                            "Statements": [
                                {
                                    "Text": "newTCB->next = currentTCB[BinaryOperator]",
                                    "Type": "Binary Operator",
                                    "Left Side": {
                                        "Text": "newTCB->next[MemberExpr]",
                                        "Type": "Null"
                                    },
                                    "Operator": "=",
                                    "Right Side": {
                                        "Text": "currentTCB[ImplicitCastExpr]",
                                        "Type": "Null"
                                    }
                                },
                                {
                                    "Text": "newTCB->next[MemberExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "currentTCB[ImplicitCastExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "newTCB->prev = currentTCB->prev[BinaryOperator]",
                                    "Type": "Binary Operator",
                                    "Left Side": {
                                        "Text": "newTCB->prev[MemberExpr]",
                                        "Type": "Null"
                                    },
                                    "Operator": "=",
                                    "Right Side": {
                                        "Text": "currentTCB->prev[ImplicitCastExpr]",
                                        "Type": "Null"
                                    }
                                },
                                {
                                    "Text": "newTCB->prev[MemberExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "currentTCB->prev[ImplicitCastExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "currentTCB->prev->next = newTCB[BinaryOperator]",
                                    "Type": "Binary Operator",
                                    "Left Side": {
                                        "Text": "currentTCB->prev->next[MemberExpr]",
                                        "Type": "Null"
                                    },
                                    "Operator": "=",
                                    "Right Side": {
                                        "Text": "newTCB[ImplicitCastExpr]",
                                        "Type": "Null"
                                    }
                                },
                                {
                                    "Text": "currentTCB->prev->next[MemberExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "newTCB[ImplicitCastExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "currentTCB->prev = newTCB[BinaryOperator]",
                                    "Type": "Binary Operator",
                                    "Left Side": {
                                        "Text": "currentTCB->prev[MemberExpr]",
                                        "Type": "Null"
                                    },
                                    "Operator": "=",
                                    "Right Side": {
                                        "Text": "newTCB[ImplicitCastExpr]",
                                        "Type": "Null"
                                    }
                                },
                                {
                                    "Text": "currentTCB->prev[MemberExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "newTCB[ImplicitCastExpr]",
                                    "Type": "Null"
                                }
                            ],
                            "Branches": ""
                        },
                        {
                            "Name": "Trace_OSA_InsertTaskBefore.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:139:13",
                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:139:13",
                            "Function": "OSA_InsertTaskBefore",
                            "Statements": [
                                {
                                    "Text": "newTCB->next = currentTCB[BinaryOperator]",
                                    "Type": "Binary Operator",
                                    "Left Side": {
                                        "Text": "newTCB->next[MemberExpr]",
                                        "Type": "Null"
                                    },
                                    "Operator": "=",
                                    "Right Side": {
                                        "Text": "currentTCB[ImplicitCastExpr]",
                                        "Type": "Null"
                                    }
                                },
                                {
                                    "Text": "newTCB->next[MemberExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "currentTCB[ImplicitCastExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "newTCB->prev = currentTCB->prev[BinaryOperator]",
                                    "Type": "Binary Operator",
                                    "Left Side": {
                                        "Text": "newTCB->prev[MemberExpr]",
                                        "Type": "Null"
                                    },
                                    "Operator": "=",
                                    "Right Side": {
                                        "Text": "currentTCB->prev[ImplicitCastExpr]",
                                        "Type": "Null"
                                    }
                                },
                                {
                                    "Text": "newTCB->prev[MemberExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "currentTCB->prev[ImplicitCastExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "currentTCB->prev->next = newTCB[BinaryOperator]",
                                    "Type": "Binary Operator",
                                    "Left Side": {
                                        "Text": "currentTCB->prev->next[MemberExpr]",
                                        "Type": "Null"
                                    },
                                    "Operator": "=",
                                    "Right Side": {
                                        "Text": "newTCB[ImplicitCastExpr]",
                                        "Type": "Null"
                                    }
                                },
                                {
                                    "Text": "currentTCB->prev->next[MemberExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "newTCB[ImplicitCastExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "currentTCB->prev = newTCB[BinaryOperator]",
                                    "Type": "Binary Operator",
                                    "Left Side": {
                                        "Text": "currentTCB->prev[MemberExpr]",
                                        "Type": "Null"
                                    },
                                    "Operator": "=",
                                    "Right Side": {
                                        "Text": "newTCB[ImplicitCastExpr]",
                                        "Type": "Null"
                                    }
                                },
                                {
                                    "Text": "currentTCB->prev[MemberExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "newTCB[ImplicitCastExpr]",
                                    "Type": "Null"
                                }
                            ],
                            "Branches": ""
                        },
                        {
                            "Name": "Trace_OSA_InsertTaskBefore.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:139:13",
                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:139:13",
                            "Function": "OSA_InsertTaskBefore",
                            "Statements": [
                                {
                                    "Text": "newTCB->next = currentTCB[BinaryOperator]",
                                    "Type": "Binary Operator",
                                    "Left Side": {
                                        "Text": "newTCB->next[MemberExpr]",
                                        "Type": "Null"
                                    },
                                    "Operator": "=",
                                    "Right Side": {
                                        "Text": "currentTCB[ImplicitCastExpr]",
                                        "Type": "Null"
                                    }
                                },
                                {
                                    "Text": "newTCB->next[MemberExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "currentTCB[ImplicitCastExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "newTCB->prev = currentTCB->prev[BinaryOperator]",
                                    "Type": "Binary Operator",
                                    "Left Side": {
                                        "Text": "newTCB->prev[MemberExpr]",
                                        "Type": "Null"
                                    },
                                    "Operator": "=",
                                    "Right Side": {
                                        "Text": "currentTCB->prev[ImplicitCastExpr]",
                                        "Type": "Null"
                                    }
                                },
                                {
                                    "Text": "newTCB->prev[MemberExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "currentTCB->prev[ImplicitCastExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "currentTCB->prev->next = newTCB[BinaryOperator]",
                                    "Type": "Binary Operator",
                                    "Left Side": {
                                        "Text": "currentTCB->prev->next[MemberExpr]",
                                        "Type": "Null"
                                    },
                                    "Operator": "=",
                                    "Right Side": {
                                        "Text": "newTCB[ImplicitCastExpr]",
                                        "Type": "Null"
                                    }
                                },
                                {
                                    "Text": "currentTCB->prev->next[MemberExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "newTCB[ImplicitCastExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "currentTCB->prev = newTCB[BinaryOperator]",
                                    "Type": "Binary Operator",
                                    "Left Side": {
                                        "Text": "currentTCB->prev[MemberExpr]",
                                        "Type": "Null"
                                    },
                                    "Operator": "=",
                                    "Right Side": {
                                        "Text": "newTCB[ImplicitCastExpr]",
                                        "Type": "Null"
                                    }
                                },
                                {
                                    "Text": "currentTCB->prev[MemberExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "newTCB[ImplicitCastExpr]",
                                    "Type": "Null"
                                }
                            ],
                            "Branches": ""
                        }
                    ]
                },
                {
                    "Name": "Trace_panic.D:\/Work\/Projects\/all\/Panic.h:82:6",
                    "File": "D:\/Work\/Projects\/all\/Panic.h:82:6",
                    "Function": "panic",
                    "Statements": "",
                    "Branches": ""
                }
            ]
        },
        {
            "Name": "Trace_LED_Init.D:\/Work\/Projects\/all\/LED.h:285:15",
            "File": "D:\/Work\/Projects\/all\/LED.h:285:15",
            "Function": "LED_Init",
            "Statements": [
                {
                    "Text": "BOARD_InitLEDs()[CallExpr]",
                    "Type": "Call Expression",
                    "Definition File": "D:\/Work\/Projects\/all\/LED.c:233:3",
                    "Called Function": "BOARD_InitLEDs",
                    "Arguments": ""
                },
                {
                    "Text": "(void)GpioOutputPinInit(ledPins, gLEDsOnTargetBoardCnt_c)[CStyleCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "mLEDTimerID = TMR_AllocateTimer()[BinaryOperator]",
                    "Type": "Binary Operator",
                    "Left Side": {
                        "Text": "mLEDTimerID[DeclRefExpr]",
                        "Type": "Null"
                    },
                    "Operator": "=",
                    "Right Side": {
                        "Text": "TMR_AllocateTimer()[CallExpr]",
                        "Type": "Call Expression",
                        "Definition File": "D:\/Work\/Projects\/all\/TimersManager.h:280:14",
                        "Called Function": "TMR_AllocateTimer",
                        "Arguments": ""
                    }
                },
                {
                    "Text": "mLEDTimerID[DeclRefExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "TMR_AllocateTimer()[CallExpr]",
                    "Type": "Call Expression",
                    "Definition File": "D:\/Work\/Projects\/all\/TimersManager.h:280:14",
                    "Called Function": "TMR_AllocateTimer",
                    "Arguments": ""
                }
            ],
            "Branches": [
                {
                    "Name": "Trace_BOARD_InitLEDs.D:\/Work\/Projects\/all\/LED.c:233:3",
                    "File": "D:\/Work\/Projects\/all\/LED.c:233:3",
                    "Function": "BOARD_InitLEDs",
                    "Statements": "",
                    "Branches": ""
                },
                {
                    "Name": "Trace_TMR_AllocateTimer.D:\/Work\/Projects\/all\/TimersManager.h:280:14",
                    "File": "D:\/Work\/Projects\/all\/TimersManager.h:280:14",
                    "Function": "TMR_AllocateTimer",
                    "Statements": [
                        {
                            "Text": "uint32_t i;[DeclStmt]",
                            "Type": "Declaration"
                        },
                        {
                            "Text": "tmrTimerID_t id = gTmrInvalidTimerID_c;[DeclStmt]",
                            "Type": "Declaration"
                        },
                        {
                            "Text": "i = 0[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "i[DeclRefExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "0[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "i[DeclRefExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "0[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "i < NumberOfElements(maTmrTimerTable)[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "i[ImplicitCastExpr]",
                                "Type": "Null"
                            },
                            "Operator": "<",
                            "Right Side": {
                                "Text": "NumberOfElements(maTmrTimerTable)[ParenExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "i[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "NumberOfElements(maTmrTimerTable)[ParenExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "For Start",
                            "Type": "Label"
                        },
                        {
                            "Text": "If(!TMR_IsTimerAllocated(i)[UnaryOperator])",
                            "Type": "Label"
                        },
                        {
                            "Text": "TMR_SetTimerStatus(i, mTmrStatusInactive_c)[CallExpr]",
                            "Type": "Call Expression",
                            "Definition File": "D:\/Work\/Projects\/all\/TimersManager.c:332:7",
                            "Called Function": "TMR_SetTimerStatus",
                            "Arguments": {
                                "Argument": {
                                    "Text": "i[ImplicitCastExpr]",
                                    "Type": "Null"
                                },
                                "Argument": {
                                    "Text": "mTmrStatusInactive_c[ImplicitCastExpr]",
                                    "Type": "Null"
                                }
                            }
                        },
                        {
                            "Text": "i[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "mTmrStatusInactive_c[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "id = i[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "id[DeclRefExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "i[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "id[DeclRefExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "i[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "break[BreakStmt]",
                            "Type": "Break"
                        },
                        {
                            "Text": "If End",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else Start",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else End",
                            "Type": "Label"
                        },
                        {
                            "Text": "++i[UnaryOperator]",
                            "Type": "Null"
                        },
                        {
                            "Text": "For End",
                            "Type": "Label"
                        },
                        {
                            "Text": "return id[ReturnStmt]",
                            "Type": "Return"
                        }
                    ],
                    "Branches": [
                        {
                            "Name": "Trace_TMR_SetTimerStatus.D:\/Work\/Projects\/all\/TimersManager.c:332:7",
                            "File": "D:\/Work\/Projects\/all\/TimersManager.c:332:7",
                            "Function": "TMR_SetTimerStatus",
                            "Statements": [
                                {
                                    "Text": "maTmrTimerStatusTable[timerID] = (tmrStatus_t)(maTmrTimerStatusTable[timerID] & (tmrStatus_t)(~mTimerStatusMask_c)) | status[BinaryOperator]",
                                    "Type": "Binary Operator",
                                    "Left Side": {
                                        "Text": "maTmrTimerStatusTable[timerID][ArraySubscriptExpr]",
                                        "Type": "Null"
                                    },
                                    "Operator": "=",
                                    "Right Side": {
                                        "Text": "(tmrStatus_t)(maTmrTimerStatusTable[timerID] & (tmrStatus_t)(~mTimerStatusMask_c)) | status[ImplicitCastExpr]",
                                        "Type": "Null"
                                    }
                                },
                                {
                                    "Text": "maTmrTimerStatusTable[timerID][ArraySubscriptExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "(tmrStatus_t)(maTmrTimerStatusTable[timerID] & (tmrStatus_t)(~mTimerStatusMask_c)) | status[ImplicitCastExpr]",
                                    "Type": "Null"
                                }
                            ],
                            "Branches": ""
                        }
                    ]
                }
            ]
        },
        {
            "Name": "Trace_SecLib_Init.D:\/Work\/Projects\/all\/SecLib.h:132:6",
            "File": "D:\/Work\/Projects\/all\/SecLib.h:132:6",
            "Function": "SecLib_Init",
            "Statements": "",
            "Branches": ""
        },
        {
            "Name": "Trace_RNG_Init.D:\/Work\/Projects\/all\/RNG_Interface.h:85:9",
            "File": "D:\/Work\/Projects\/all\/RNG_Interface.h:85:9",
            "Function": "RNG_Init",
            "Statements": [
                {
                    "Text": "uint32_t seed;[DeclStmt]",
                    "Type": "Declaration"
                },
                {
                    "Text": "uint8_t status = gRngSuccess_d;[DeclStmt]",
                    "Type": "Declaration"
                },
                {
                    "Text": "If(status == gRngSuccess_d[BinaryOperator])",
                    "Type": "Label"
                },
                {
                    "Text": "SecLib_set_rng_seed(seed + 1)[CallExpr]",
                    "Type": "Call Expression",
                    "Definition File": "D:\/Work\/Projects\/all\/RNG.c:113:17",
                    "Called Function": "SecLib_set_rng_seed",
                    "Arguments": {
                        "Argument": {
                            "Text": "seed + 1[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "seed[ImplicitCastExpr]",
                                "Type": "Null"
                            },
                            "Operator": "+",
                            "Right Side": {
                                "Text": "1[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        }
                    }
                },
                {
                    "Text": "seed + 1[BinaryOperator]",
                    "Type": "Binary Operator",
                    "Left Side": {
                        "Text": "seed[ImplicitCastExpr]",
                        "Type": "Null"
                    },
                    "Operator": "+",
                    "Right Side": {
                        "Text": "1[ImplicitCastExpr]",
                        "Type": "Null"
                    }
                },
                {
                    "Text": "seed[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "1[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "If End",
                    "Type": "Label"
                },
                {
                    "Text": "Else Start",
                    "Type": "Label"
                },
                {
                    "Text": "Else End",
                    "Type": "Label"
                },
                {
                    "Text": "return status[ReturnStmt]",
                    "Type": "Return"
                }
            ],
            "Branches": [
                {
                    "Name": "Trace_SecLib_set_rng_seed.D:\/Work\/Projects\/all\/RNG.c:113:17",
                    "File": "D:\/Work\/Projects\/all\/RNG.c:113:17",
                    "Function": "SecLib_set_rng_seed",
                    "Statements": "",
                    "Branches": ""
                }
            ]
        },
        {
            "Name": "Trace_RNG_SetPseudoRandomNoSeed.D:\/Work\/Projects\/all\/RNG_Interface.h:109:6",
            "File": "D:\/Work\/Projects\/all\/RNG_Interface.h:109:6",
            "Function": "RNG_SetPseudoRandomNoSeed",
            "Statements": [
                {
                    "Text": "uint8_t pseudoRNGSeed[mPRNG_NoOfBytes_c] = {0};[DeclStmt]",
                    "Type": "Declaration"
                },
                {
                    "Text": "uint32_t i;[DeclStmt]",
                    "Type": "Declaration"
                },
                {
                    "Text": "mPRNG_Requests = 1[BinaryOperator]",
                    "Type": "Binary Operator",
                    "Left Side": {
                        "Text": "mPRNG_Requests[DeclRefExpr]",
                        "Type": "Null"
                    },
                    "Operator": "=",
                    "Right Side": {
                        "Text": "1[ImplicitCastExpr]",
                        "Type": "Null"
                    }
                },
                {
                    "Text": "mPRNG_Requests[DeclRefExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "1[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "i = 0[BinaryOperator]",
                    "Type": "Binary Operator",
                    "Left Side": {
                        "Text": "i[DeclRefExpr]",
                        "Type": "Null"
                    },
                    "Operator": "=",
                    "Right Side": {
                        "Text": "0[ImplicitCastExpr]",
                        "Type": "Null"
                    }
                },
                {
                    "Text": "i[DeclRefExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "0[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "i < mPRNG_NoOfBytes_c[BinaryOperator]",
                    "Type": "Binary Operator",
                    "Left Side": {
                        "Text": "i[ImplicitCastExpr]",
                        "Type": "Null"
                    },
                    "Operator": "<",
                    "Right Side": {
                        "Text": "mPRNG_NoOfBytes_c[ImplicitCastExpr]",
                        "Type": "Null"
                    }
                },
                {
                    "Text": "i[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "mPRNG_NoOfBytes_c[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "For Start",
                    "Type": "Label"
                },
                {
                    "Text": "RNG_GetRandomNo((uint32_t *)(&(pseudoRNGSeed[i])))[CallExpr]",
                    "Type": "Call Expression",
                    "Definition File": "D:\/Work\/Projects\/all\/RNG.c:282:6",
                    "Called Function": "RNG_GetRandomNo",
                    "Arguments": {
                        "Argument": {
                            "Text": "(uint32_t *)(&(pseudoRNGSeed[i]))[CStyleCastExpr]",
                            "Type": "Null"
                        }
                    }
                },
                {
                    "Text": "(uint32_t *)(&(pseudoRNGSeed[i]))[CStyleCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "i += 4[CompoundAssignOperator]",
                    "Type": "Null"
                },
                {
                    "Text": "For End",
                    "Type": "Label"
                },
                {
                    "Text": "FLib_MemCpy( XKEY, pseudoRNGSeed, mPRNG_NoOfBytes_c )[CallExpr]",
                    "Type": "Call Expression",
                    "Definition File": "D:\/Work\/Projects\/all\/FunctionLib.h:93:6",
                    "Called Function": "FLib_MemCpy",
                    "Arguments": {
                        "Argument": {
                            "Text": "XKEY[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        "Argument": {
                            "Text": "pseudoRNGSeed[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        "Argument": {
                            "Text": "mPRNG_NoOfBytes_c[ImplicitCastExpr]",
                            "Type": "Null"
                        }
                    }
                },
                {
                    "Text": "XKEY[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "pseudoRNGSeed[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "mPRNG_NoOfBytes_c[ImplicitCastExpr]",
                    "Type": "Null"
                }
            ],
            "Branches": [
                {
                    "Name": "Trace_RNG_GetRandomNo.D:\/Work\/Projects\/all\/RNG.c:282:6",
                    "File": "D:\/Work\/Projects\/all\/RNG.c:282:6",
                    "Function": "RNG_GetRandomNo",
                    "Statements": [
                        {
                            "Text": "If(NULL != pRandomNo[BinaryOperator])",
                            "Type": "Label"
                        },
                        {
                            "Text": "uint32_t n = SecLib_get_random();[DeclStmt]",
                            "Type": "Declaration"
                        },
                        {
                            "Text": "FLib_MemCpy(pRandomNo, &n, sizeof(uint32_t))[CallExpr]",
                            "Type": "Call Expression",
                            "Definition File": "D:\/Work\/Projects\/all\/FunctionLib.h:93:6",
                            "Called Function": "FLib_MemCpy",
                            "Arguments": {
                                "Argument": {
                                    "Text": "pRandomNo[ImplicitCastExpr]",
                                    "Type": "Null"
                                },
                                "Argument": {
                                    "Text": "&n[ImplicitCastExpr]",
                                    "Type": "Null"
                                },
                                "Argument": {
                                    "Text": "sizeof(uint32_t)[ImplicitCastExpr]",
                                    "Type": "Null"
                                }
                            }
                        },
                        {
                            "Text": "pRandomNo[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "&n[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "sizeof(uint32_t)[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "If End",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else Start",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else End",
                            "Type": "Label"
                        }
                    ],
                    "Branches": [
                        {
                            "Name": "Trace_FLib_MemCpy.D:\/Work\/Projects\/all\/FunctionLib.h:93:6",
                            "File": "D:\/Work\/Projects\/all\/FunctionLib.h:93:6",
                            "Function": "FLib_MemCpy",
                            "Statements": [
                                {
                                    "Text": "cBytes[ImplicitCastExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "While Start",
                                    "Type": "Label"
                                },
                                {
                                    "Text": "*((uint8_t*)pDst) = *((uint8_t*)pSrc)[BinaryOperator]",
                                    "Type": "Binary Operator",
                                    "Left Side": {
                                        "Text": "*((uint8_t*)pDst)[UnaryOperator]",
                                        "Type": "Null"
                                    },
                                    "Operator": "=",
                                    "Right Side": {
                                        "Text": "*((uint8_t*)pSrc)[ImplicitCastExpr]",
                                        "Type": "Null"
                                    }
                                },
                                {
                                    "Text": "*((uint8_t*)pDst)[UnaryOperator]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "*((uint8_t*)pSrc)[ImplicitCastExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "pDst = ((uint8_t*)pDst)+1[BinaryOperator]",
                                    "Type": "Binary Operator",
                                    "Left Side": {
                                        "Text": "pDst[DeclRefExpr]",
                                        "Type": "Null"
                                    },
                                    "Operator": "=",
                                    "Right Side": {
                                        "Text": "((uint8_t*)pDst)+1[ImplicitCastExpr]",
                                        "Type": "Null"
                                    }
                                },
                                {
                                    "Text": "pDst[DeclRefExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "((uint8_t*)pDst)+1[ImplicitCastExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "pSrc = ((uint8_t*)pSrc)+1[BinaryOperator]",
                                    "Type": "Binary Operator",
                                    "Left Side": {
                                        "Text": "pSrc[DeclRefExpr]",
                                        "Type": "Null"
                                    },
                                    "Operator": "=",
                                    "Right Side": {
                                        "Text": "((uint8_t*)pSrc)+1[ImplicitCastExpr]",
                                        "Type": "Null"
                                    }
                                },
                                {
                                    "Text": "pSrc[DeclRefExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "((uint8_t*)pSrc)+1[ImplicitCastExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "cBytes--[UnaryOperator]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "While End",
                                    "Type": "Label"
                                }
                            ],
                            "Branches": ""
                        }
                    ]
                },
                {
                    "Name": "Trace_FLib_MemCpy.D:\/Work\/Projects\/all\/FunctionLib.h:93:6",
                    "File": "D:\/Work\/Projects\/all\/FunctionLib.h:93:6",
                    "Function": "FLib_MemCpy",
                    "Statements": [
                        {
                            "Text": "cBytes[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "While Start",
                            "Type": "Label"
                        },
                        {
                            "Text": "*((uint8_t*)pDst) = *((uint8_t*)pSrc)[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "*((uint8_t*)pDst)[UnaryOperator]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "*((uint8_t*)pSrc)[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "*((uint8_t*)pDst)[UnaryOperator]",
                            "Type": "Null"
                        },
                        {
                            "Text": "*((uint8_t*)pSrc)[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "pDst = ((uint8_t*)pDst)+1[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "pDst[DeclRefExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "((uint8_t*)pDst)+1[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "pDst[DeclRefExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "((uint8_t*)pDst)+1[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "pSrc = ((uint8_t*)pSrc)+1[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "pSrc[DeclRefExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "((uint8_t*)pSrc)+1[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "pSrc[DeclRefExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "((uint8_t*)pSrc)+1[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "cBytes--[UnaryOperator]",
                            "Type": "Null"
                        },
                        {
                            "Text": "While End",
                            "Type": "Label"
                        }
                    ],
                    "Branches": ""
                }
            ]
        },
        {
            "Name": "Trace_LED_StartFlashWithPeriod.D:\/Work\/Projects\/all\/LED.h:391:8",
            "File": "D:\/Work\/Projects\/all\/LED.h:391:8",
            "Function": "LED_StartFlashWithPeriod",
            "Statements": [
                {
                    "Text": "mLedFlashingLEDs |= LEDNr[CompoundAssignOperator]",
                    "Type": "Null"
                },
                {
                    "Text": "If(!TMR_IsTimerActive(mLEDTimerID)[UnaryOperator])",
                    "Type": "Label"
                },
                {
                    "Text": "TMR_StartIntervalTimer(mLEDTimerID, periodMs, (pfTmrCallBack_t)LED_FlashTimeout,\\u005cu000d\\u005cu000a                           (void *)((uint32_t)mLEDTimerID))[CallExpr]",
                    "Type": "Call Expression",
                    "Definition File": "D:\/Work\/Projects\/all\/TimersManager.h:507:14",
                    "Called Function": "TMR_StartIntervalTimer",
                    "Arguments": {
                        "Argument": {
                            "Text": "mLEDTimerID[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        "Argument": {
                            "Text": "periodMs[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        "Argument": {
                            "Text": "(pfTmrCallBack_t)LED_FlashTimeout[CStyleCastExpr]",
                            "Type": "Null"
                        },
                        "Argument": {
                            "Text": "(void *)((uint32_t)mLEDTimerID)[CStyleCastExpr]",
                            "Type": "Null"
                        }
                    }
                },
                {
                    "Text": "mLEDTimerID[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "periodMs[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "(pfTmrCallBack_t)LED_FlashTimeout[CStyleCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "(void *)((uint32_t)mLEDTimerID)[CStyleCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "If End",
                    "Type": "Label"
                },
                {
                    "Text": "Else Start",
                    "Type": "Label"
                },
                {
                    "Text": "Else End",
                    "Type": "Label"
                }
            ],
            "Branches": [
                {
                    "Name": "Trace_TMR_StartIntervalTimer.D:\/Work\/Projects\/all\/TimersManager.h:507:14",
                    "File": "D:\/Work\/Projects\/all\/TimersManager.h:507:14",
                    "Function": "TMR_StartIntervalTimer",
                    "Statements": [
                        {
                            "Text": "return TMR_StartTimer(timerID, gTmrIntervalTimer_c, timeInMilliseconds, callback, param)[ReturnStmt]",
                            "Type": "Return"
                        }
                    ],
                    "Branches": ""
                }
            ]
        },
        {
            "Name": "Trace_LED_StartFlashWithPeriod.D:\/Work\/Projects\/all\/LED.h:391:8",
            "File": "D:\/Work\/Projects\/all\/LED.h:391:8",
            "Function": "LED_StartFlashWithPeriod",
            "Statements": [
                {
                    "Text": "mLedFlashingLEDs |= LEDNr[CompoundAssignOperator]",
                    "Type": "Null"
                },
                {
                    "Text": "If(!TMR_IsTimerActive(mLEDTimerID)[UnaryOperator])",
                    "Type": "Label"
                },
                {
                    "Text": "TMR_StartIntervalTimer(mLEDTimerID, periodMs, (pfTmrCallBack_t)LED_FlashTimeout,\\u005cu000d\\u005cu000a                           (void *)((uint32_t)mLEDTimerID))[CallExpr]",
                    "Type": "Call Expression",
                    "Definition File": "D:\/Work\/Projects\/all\/TimersManager.h:507:14",
                    "Called Function": "TMR_StartIntervalTimer",
                    "Arguments": {
                        "Argument": {
                            "Text": "mLEDTimerID[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        "Argument": {
                            "Text": "periodMs[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        "Argument": {
                            "Text": "(pfTmrCallBack_t)LED_FlashTimeout[CStyleCastExpr]",
                            "Type": "Null"
                        },
                        "Argument": {
                            "Text": "(void *)((uint32_t)mLEDTimerID)[CStyleCastExpr]",
                            "Type": "Null"
                        }
                    }
                },
                {
                    "Text": "mLEDTimerID[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "periodMs[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "(pfTmrCallBack_t)LED_FlashTimeout[CStyleCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "(void *)((uint32_t)mLEDTimerID)[CStyleCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "If End",
                    "Type": "Label"
                },
                {
                    "Text": "Else Start",
                    "Type": "Label"
                },
                {
                    "Text": "Else End",
                    "Type": "Label"
                }
            ],
            "Branches": [
                {
                    "Name": "Trace_TMR_StartIntervalTimer.D:\/Work\/Projects\/all\/TimersManager.h:507:14",
                    "File": "D:\/Work\/Projects\/all\/TimersManager.h:507:14",
                    "Function": "TMR_StartIntervalTimer",
                    "Statements": [
                        {
                            "Text": "return TMR_StartTimer(timerID, gTmrIntervalTimer_c, timeInMilliseconds, callback, param)[ReturnStmt]",
                            "Type": "Return"
                        }
                    ],
                    "Branches": ""
                }
            ]
        },
        {
            "Name": "Trace_LED_StartFlashWithPeriod.D:\/Work\/Projects\/all\/LED.h:391:8",
            "File": "D:\/Work\/Projects\/all\/LED.h:391:8",
            "Function": "LED_StartFlashWithPeriod",
            "Statements": [
                {
                    "Text": "mLedFlashingLEDs |= LEDNr[CompoundAssignOperator]",
                    "Type": "Null"
                },
                {
                    "Text": "If(!TMR_IsTimerActive(mLEDTimerID)[UnaryOperator])",
                    "Type": "Label"
                },
                {
                    "Text": "TMR_StartIntervalTimer(mLEDTimerID, periodMs, (pfTmrCallBack_t)LED_FlashTimeout,\\u005cu000d\\u005cu000a                           (void *)((uint32_t)mLEDTimerID))[CallExpr]",
                    "Type": "Call Expression",
                    "Definition File": "D:\/Work\/Projects\/all\/TimersManager.h:507:14",
                    "Called Function": "TMR_StartIntervalTimer",
                    "Arguments": {
                        "Argument": {
                            "Text": "mLEDTimerID[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        "Argument": {
                            "Text": "periodMs[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        "Argument": {
                            "Text": "(pfTmrCallBack_t)LED_FlashTimeout[CStyleCastExpr]",
                            "Type": "Null"
                        },
                        "Argument": {
                            "Text": "(void *)((uint32_t)mLEDTimerID)[CStyleCastExpr]",
                            "Type": "Null"
                        }
                    }
                },
                {
                    "Text": "mLEDTimerID[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "periodMs[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "(pfTmrCallBack_t)LED_FlashTimeout[CStyleCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "(void *)((uint32_t)mLEDTimerID)[CStyleCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "If End",
                    "Type": "Label"
                },
                {
                    "Text": "Else Start",
                    "Type": "Label"
                },
                {
                    "Text": "Else End",
                    "Type": "Label"
                }
            ],
            "Branches": [
                {
                    "Name": "Trace_TMR_StartIntervalTimer.D:\/Work\/Projects\/all\/TimersManager.h:507:14",
                    "File": "D:\/Work\/Projects\/all\/TimersManager.h:507:14",
                    "Function": "TMR_StartIntervalTimer",
                    "Statements": [
                        {
                            "Text": "return TMR_StartTimer(timerID, gTmrIntervalTimer_c, timeInMilliseconds, callback, param)[ReturnStmt]",
                            "Type": "Return"
                        }
                    ],
                    "Branches": ""
                }
            ]
        },
        {
            "Name": "Trace_LED_StartFlashWithPeriod.D:\/Work\/Projects\/all\/LED.h:391:8",
            "File": "D:\/Work\/Projects\/all\/LED.h:391:8",
            "Function": "LED_StartFlashWithPeriod",
            "Statements": [
                {
                    "Text": "mLedFlashingLEDs |= LEDNr[CompoundAssignOperator]",
                    "Type": "Null"
                },
                {
                    "Text": "If(!TMR_IsTimerActive(mLEDTimerID)[UnaryOperator])",
                    "Type": "Label"
                },
                {
                    "Text": "TMR_StartIntervalTimer(mLEDTimerID, periodMs, (pfTmrCallBack_t)LED_FlashTimeout,\\u005cu000d\\u005cu000a                           (void *)((uint32_t)mLEDTimerID))[CallExpr]",
                    "Type": "Call Expression",
                    "Definition File": "D:\/Work\/Projects\/all\/TimersManager.h:507:14",
                    "Called Function": "TMR_StartIntervalTimer",
                    "Arguments": {
                        "Argument": {
                            "Text": "mLEDTimerID[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        "Argument": {
                            "Text": "periodMs[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        "Argument": {
                            "Text": "(pfTmrCallBack_t)LED_FlashTimeout[CStyleCastExpr]",
                            "Type": "Null"
                        },
                        "Argument": {
                            "Text": "(void *)((uint32_t)mLEDTimerID)[CStyleCastExpr]",
                            "Type": "Null"
                        }
                    }
                },
                {
                    "Text": "mLEDTimerID[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "periodMs[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "(pfTmrCallBack_t)LED_FlashTimeout[CStyleCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "(void *)((uint32_t)mLEDTimerID)[CStyleCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "If End",
                    "Type": "Label"
                },
                {
                    "Text": "Else Start",
                    "Type": "Label"
                },
                {
                    "Text": "Else End",
                    "Type": "Label"
                }
            ],
            "Branches": [
                {
                    "Name": "Trace_TMR_StartIntervalTimer.D:\/Work\/Projects\/all\/TimersManager.h:507:14",
                    "File": "D:\/Work\/Projects\/all\/TimersManager.h:507:14",
                    "Function": "TMR_StartIntervalTimer",
                    "Statements": [
                        {
                            "Text": "return TMR_StartTimer(timerID, gTmrIntervalTimer_c, timeInMilliseconds, callback, param)[ReturnStmt]",
                            "Type": "Return"
                        }
                    ],
                    "Branches": ""
                }
            ]
        },
        {
            "Name": "Trace_BleApp_Init.D:\/Work\/Projects\/all\/ApplMain.c:286:13",
            "File": "D:\/Work\/Projects\/all\/ApplMain.c:286:13",
            "Function": "BleApp_Init",
            "Statements": "",
            "Branches": ""
        },
        {
            "Name": "Trace_OSA_EventCreate.D:\/Work\/Projects\/all\/fsl_os_abstraction.h:441:14",
            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:441:14",
            "Function": "OSA_EventCreate",
            "Statements": [
                {
                    "Text": "osaEventId_t eventId;[DeclStmt]",
                    "Type": "Declaration"
                },
                {
                    "Text": "osEventStruct_t* pEventStruct;[DeclStmt]",
                    "Type": "Declaration"
                },
                {
                    "Text": "OSA_InterruptDisable()[CallExpr]",
                    "Type": "Call Expression",
                    "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:570:6",
                    "Called Function": "OSA_InterruptDisable",
                    "Arguments": ""
                },
                {
                    "Text": "eventId = pEventStruct = osObjectAlloc(&osEventInfo)[BinaryOperator]",
                    "Type": "Binary Operator",
                    "Left Side": {
                        "Text": "eventId[DeclRefExpr]",
                        "Type": "Null"
                    },
                    "Operator": "=",
                    "Right Side": {
                        "Text": "pEventStruct = osObjectAlloc(&osEventInfo)[ImplicitCastExpr]",
                        "Type": "Null"
                    }
                },
                {
                    "Text": "eventId[DeclRefExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "pEventStruct = osObjectAlloc(&osEventInfo)[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "OSA_InterruptEnable()[CallExpr]",
                    "Type": "Call Expression",
                    "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                    "Called Function": "OSA_InterruptEnable",
                    "Arguments": ""
                },
                {
                    "Text": "If(eventId == NULL[BinaryOperator])",
                    "Type": "Label"
                },
                {
                    "Text": "return NULL[ReturnStmt]",
                    "Type": "Return"
                },
                {
                    "Text": "If End",
                    "Type": "Label"
                },
                {
                    "Text": "Else Start",
                    "Type": "Label"
                },
                {
                    "Text": "Else End",
                    "Type": "Label"
                },
                {
                    "Text": "pEventStruct->event.flags     = 0[BinaryOperator]",
                    "Type": "Binary Operator",
                    "Left Side": {
                        "Text": "pEventStruct->event.flags[MemberExpr]",
                        "Type": "Null"
                    },
                    "Operator": "=",
                    "Right Side": {
                        "Text": "0[ImplicitCastExpr]",
                        "Type": "Null"
                    }
                },
                {
                    "Text": "pEventStruct->event.flags[MemberExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "0[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "pEventStruct->event.autoClear = autoClear[BinaryOperator]",
                    "Type": "Binary Operator",
                    "Left Side": {
                        "Text": "pEventStruct->event.autoClear[MemberExpr]",
                        "Type": "Null"
                    },
                    "Operator": "=",
                    "Right Side": {
                        "Text": "autoClear[ImplicitCastExpr]",
                        "Type": "Null"
                    }
                },
                {
                    "Text": "pEventStruct->event.autoClear[MemberExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "autoClear[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "pEventStruct->event.time_start = 0u[BinaryOperator]",
                    "Type": "Binary Operator",
                    "Left Side": {
                        "Text": "pEventStruct->event.time_start[MemberExpr]",
                        "Type": "Null"
                    },
                    "Operator": "=",
                    "Right Side": {
                        "Text": "0u[IntegerLiteral]",
                        "Type": "Null"
                    }
                },
                {
                    "Text": "pEventStruct->event.time_start[MemberExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "0u[IntegerLiteral]",
                    "Type": "Null"
                },
                {
                    "Text": "pEventStruct->event.timeout = 0u[BinaryOperator]",
                    "Type": "Binary Operator",
                    "Left Side": {
                        "Text": "pEventStruct->event.timeout[MemberExpr]",
                        "Type": "Null"
                    },
                    "Operator": "=",
                    "Right Side": {
                        "Text": "0u[IntegerLiteral]",
                        "Type": "Null"
                    }
                },
                {
                    "Text": "pEventStruct->event.timeout[MemberExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "0u[IntegerLiteral]",
                    "Type": "Null"
                },
                {
                    "Text": "pEventStruct->event.waitingTask = NULL[BinaryOperator]",
                    "Type": "Binary Operator",
                    "Left Side": {
                        "Text": "pEventStruct->event.waitingTask[MemberExpr]",
                        "Type": "Null"
                    },
                    "Operator": "=",
                    "Right Side": {
                        "Text": "NULL[ImplicitCastExpr]",
                        "Type": "Null"
                    }
                },
                {
                    "Text": "pEventStruct->event.waitingTask[MemberExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "NULL[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "return eventId[ReturnStmt]",
                    "Type": "Return"
                }
            ],
            "Branches": [
                {
                    "Name": "Trace_OSA_InterruptDisable.D:\/Work\/Projects\/all\/fsl_os_abstraction.h:570:6",
                    "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:570:6",
                    "Function": "OSA_InterruptDisable",
                    "Statements": [
                        {
                            "Text": "OSA_DisableIRQGlobal()[CallExpr]",
                            "Type": "Call Expression",
                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:232:6",
                            "Called Function": "OSA_DisableIRQGlobal",
                            "Arguments": ""
                        }
                    ],
                    "Branches": [
                        {
                            "Name": "Trace_OSA_DisableIRQGlobal.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:232:6",
                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:232:6",
                            "Function": "OSA_DisableIRQGlobal",
                            "Statements": [
                                {
                                    "Text": "__disable_irq()[CallExpr]",
                                    "Type": "Call Expression",
                                    "Definition File": "D:\/Work\/Projects\/all\/fsl_common.h:405:5",
                                    "Called Function": "__disable_irq",
                                    "Arguments": ""
                                },
                                {
                                    "Text": "gInterruptDisableCount++[UnaryOperator]",
                                    "Type": "Null"
                                }
                            ],
                            "Branches": [
                                {
                                    "Name": "Trace___disable_irq.D:\/Work\/Projects\/all\/fsl_common.h:405:5",
                                    "File": "D:\/Work\/Projects\/all\/fsl_common.h:405:5",
                                    "Function": "__disable_irq",
                                    "Statements": "",
                                    "Branches": ""
                                }
                            ]
                        }
                    ]
                },
                {
                    "Name": "Trace_OSA_InterruptEnable.D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                    "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                    "Function": "OSA_InterruptEnable",
                    "Statements": [
                        {
                            "Text": "OSA_EnableIRQGlobal()[CallExpr]",
                            "Type": "Call Expression",
                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                            "Called Function": "OSA_EnableIRQGlobal",
                            "Arguments": ""
                        }
                    ],
                    "Branches": [
                        {
                            "Name": "Trace_OSA_EnableIRQGlobal.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                            "Function": "OSA_EnableIRQGlobal",
                            "Statements": [
                                {
                                    "Text": "If(gInterruptDisableCount > 0[BinaryOperator])",
                                    "Type": "Label"
                                },
                                {
                                    "Text": "gInterruptDisableCount--[UnaryOperator]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "If(gInterruptDisableCount == 0[BinaryOperator])",
                                    "Type": "Label"
                                },
                                {
                                    "Text": "__enable_irq()[CallExpr]",
                                    "Type": "Call Expression",
                                    "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                    "Called Function": "__enable_irq",
                                    "Arguments": ""
                                },
                                {
                                    "Text": "If End",
                                    "Type": "Label"
                                },
                                {
                                    "Text": "Else Start",
                                    "Type": "Label"
                                },
                                {
                                    "Text": "Else End",
                                    "Type": "Label"
                                },
                                {
                                    "Text": "If End",
                                    "Type": "Label"
                                },
                                {
                                    "Text": "Else Start",
                                    "Type": "Label"
                                },
                                {
                                    "Text": "Else End",
                                    "Type": "Label"
                                }
                            ],
                            "Branches": [
                                {
                                    "Name": "Trace___enable_irq.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                    "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                    "Function": "__enable_irq",
                                    "Statements": "",
                                    "Branches": ""
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "Name": "Trace_panic.D:\/Work\/Projects\/all\/Panic.h:82:6",
            "File": "D:\/Work\/Projects\/all\/Panic.h:82:6",
            "Function": "panic",
            "Statements": "",
            "Branches": ""
        },
        {
            "Name": "Trace_ListInit.D:\/Work\/Projects\/all\/GenericList.h:87:6",
            "File": "D:\/Work\/Projects\/all\/GenericList.h:87:6",
            "Function": "ListInit",
            "Statements": [
                {
                    "Text": "list->head = NULL[BinaryOperator]",
                    "Type": "Binary Operator",
                    "Left Side": {
                        "Text": "list->head[MemberExpr]",
                        "Type": "Null"
                    },
                    "Operator": "=",
                    "Right Side": {
                        "Text": "NULL[ImplicitCastExpr]",
                        "Type": "Null"
                    }
                },
                {
                    "Text": "list->head[MemberExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "NULL[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "list->tail = NULL[BinaryOperator]",
                    "Type": "Binary Operator",
                    "Left Side": {
                        "Text": "list->tail[MemberExpr]",
                        "Type": "Null"
                    },
                    "Operator": "=",
                    "Right Side": {
                        "Text": "NULL[ImplicitCastExpr]",
                        "Type": "Null"
                    }
                },
                {
                    "Text": "list->tail[MemberExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "NULL[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "list->max = max[BinaryOperator]",
                    "Type": "Binary Operator",
                    "Left Side": {
                        "Text": "list->max[MemberExpr]",
                        "Type": "Null"
                    },
                    "Operator": "=",
                    "Right Side": {
                        "Text": "max[ImplicitCastExpr]",
                        "Type": "Null"
                    }
                },
                {
                    "Text": "list->max[MemberExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "max[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "list->size = 0[BinaryOperator]",
                    "Type": "Binary Operator",
                    "Left Side": {
                        "Text": "list->size[MemberExpr]",
                        "Type": "Null"
                    },
                    "Operator": "=",
                    "Right Side": {
                        "Text": "0[ImplicitCastExpr]",
                        "Type": "Null"
                    }
                },
                {
                    "Text": "list->size[MemberExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "0[ImplicitCastExpr]",
                    "Type": "Null"
                }
            ],
            "Branches": ""
        },
        {
            "Name": "Trace_ListInit.D:\/Work\/Projects\/all\/GenericList.h:87:6",
            "File": "D:\/Work\/Projects\/all\/GenericList.h:87:6",
            "Function": "ListInit",
            "Statements": [
                {
                    "Text": "list->head = NULL[BinaryOperator]",
                    "Type": "Binary Operator",
                    "Left Side": {
                        "Text": "list->head[MemberExpr]",
                        "Type": "Null"
                    },
                    "Operator": "=",
                    "Right Side": {
                        "Text": "NULL[ImplicitCastExpr]",
                        "Type": "Null"
                    }
                },
                {
                    "Text": "list->head[MemberExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "NULL[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "list->tail = NULL[BinaryOperator]",
                    "Type": "Binary Operator",
                    "Left Side": {
                        "Text": "list->tail[MemberExpr]",
                        "Type": "Null"
                    },
                    "Operator": "=",
                    "Right Side": {
                        "Text": "NULL[ImplicitCastExpr]",
                        "Type": "Null"
                    }
                },
                {
                    "Text": "list->tail[MemberExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "NULL[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "list->max = max[BinaryOperator]",
                    "Type": "Binary Operator",
                    "Left Side": {
                        "Text": "list->max[MemberExpr]",
                        "Type": "Null"
                    },
                    "Operator": "=",
                    "Right Side": {
                        "Text": "max[ImplicitCastExpr]",
                        "Type": "Null"
                    }
                },
                {
                    "Text": "list->max[MemberExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "max[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "list->size = 0[BinaryOperator]",
                    "Type": "Binary Operator",
                    "Left Side": {
                        "Text": "list->size[MemberExpr]",
                        "Type": "Null"
                    },
                    "Operator": "=",
                    "Right Side": {
                        "Text": "0[ImplicitCastExpr]",
                        "Type": "Null"
                    }
                },
                {
                    "Text": "list->size[MemberExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "0[ImplicitCastExpr]",
                    "Type": "Null"
                }
            ],
            "Branches": ""
        },
        {
            "Name": "Trace_panic.D:\/Work\/Projects\/all\/Panic.h:82:6",
            "File": "D:\/Work\/Projects\/all\/Panic.h:82:6",
            "Function": "panic",
            "Statements": "",
            "Branches": ""
        },
        {
            "Name": "Trace_App_Thread.D:\/Work\/Projects\/all\/ApplMain.c:228:13",
            "File": "D:\/Work\/Projects\/all\/ApplMain.c:228:13",
            "Function": "App_Thread",
            "Statements": [
                {
                    "Text": "osaEventFlags_t event;[DeclStmt]",
                    "Type": "Declaration"
                },
                {
                    "Text": "1[IntegerLiteral]",
                    "Type": "Null"
                },
                {
                    "Text": "While Start",
                    "Type": "Label"
                },
                {
                    "Text": "OSA_EventWait(mAppEvent, osaEventFlagsAll_c, FALSE, osaWaitForever_c , &event)[CallExpr]",
                    "Type": "Call Expression",
                    "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:495:13",
                    "Called Function": "OSA_EventWait",
                    "Arguments": {
                        "Argument": {
                            "Text": "mAppEvent[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        "Argument": {
                            "Text": "osaEventFlagsAll_c[ParenExpr]",
                            "Type": "Null"
                        },
                        "Argument": {
                            "Text": "FALSE[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        "Argument": {
                            "Text": "osaWaitForever_c[ParenExpr]",
                            "Type": "Null"
                        },
                        "Argument": {
                            "Text": "&event[UnaryOperator]",
                            "Type": "Null"
                        }
                    }
                },
                {
                    "Text": "mAppEvent[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "osaEventFlagsAll_c[ParenExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "FALSE[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "osaWaitForever_c[ParenExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "&event[UnaryOperator]",
                    "Type": "Null"
                },
                {
                    "Text": "If(event & gAppEvtMsgFromHostStack_c[BinaryOperator])",
                    "Type": "Label"
                },
                {
                    "Text": "appMsgFromHost_t *pMsgIn = NULL;[DeclStmt]",
                    "Type": "Declaration"
                },
                {
                    "Text": "MSG_Pending(&mHostAppInputQueue)[ParenExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "While Start",
                    "Type": "Label"
                },
                {
                    "Text": "pMsgIn = MSG_DeQueue(&mHostAppInputQueue)[BinaryOperator]",
                    "Type": "Binary Operator",
                    "Left Side": {
                        "Text": "pMsgIn[DeclRefExpr]",
                        "Type": "Null"
                    },
                    "Operator": "=",
                    "Right Side": {
                        "Text": "MSG_DeQueue(&mHostAppInputQueue)[ImplicitCastExpr]",
                        "Type": "Null"
                    }
                },
                {
                    "Text": "pMsgIn[DeclRefExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "MSG_DeQueue(&mHostAppInputQueue)[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "If(pMsgIn[ImplicitCastExpr])",
                    "Type": "Label"
                },
                {
                    "Text": "App_HandleHostMessageInput(pMsgIn)[CallExpr]",
                    "Type": "Call Expression",
                    "Definition File": "D:\/Work\/Projects\/all\/ApplMain.c:229:13",
                    "Called Function": "App_HandleHostMessageInput",
                    "Arguments": {
                        "Argument": {
                            "Text": "pMsgIn[ImplicitCastExpr]",
                            "Type": "Null"
                        }
                    }
                },
                {
                    "Text": "pMsgIn[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "MSG_Free(pMsgIn)[CallExpr]",
                    "Type": "Call Expression",
                    "Definition File": "D:\/Work\/Projects\/all\/MemManager.h:114:13",
                    "Called Function": "MEM_BufferFree",
                    "Arguments": {
                        "Argument": {
                            "Text": "pMsgIn[ImplicitCastExpr]",
                            "Type": "Null"
                        }
                    }
                },
                {
                    "Text": "pMsgIn[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "pMsgIn = NULL[BinaryOperator]",
                    "Type": "Binary Operator",
                    "Left Side": {
                        "Text": "pMsgIn[DeclRefExpr]",
                        "Type": "Null"
                    },
                    "Operator": "=",
                    "Right Side": {
                        "Text": "NULL[ImplicitCastExpr]",
                        "Type": "Null"
                    }
                },
                {
                    "Text": "pMsgIn[DeclRefExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "NULL[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "If End",
                    "Type": "Label"
                },
                {
                    "Text": "Else Start",
                    "Type": "Label"
                },
                {
                    "Text": "Else End",
                    "Type": "Label"
                },
                {
                    "Text": "While End",
                    "Type": "Label"
                },
                {
                    "Text": "If End",
                    "Type": "Label"
                },
                {
                    "Text": "Else Start",
                    "Type": "Label"
                },
                {
                    "Text": "Else End",
                    "Type": "Label"
                },
                {
                    "Text": "If(event & gAppEvtAppCallback_c[BinaryOperator])",
                    "Type": "Label"
                },
                {
                    "Text": "appMsgCallback_t *pMsgIn = NULL;[DeclStmt]",
                    "Type": "Declaration"
                },
                {
                    "Text": "MSG_Pending(&mAppCbInputQueue)[ParenExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "While Start",
                    "Type": "Label"
                },
                {
                    "Text": "pMsgIn = MSG_DeQueue(&mAppCbInputQueue)[BinaryOperator]",
                    "Type": "Binary Operator",
                    "Left Side": {
                        "Text": "pMsgIn[DeclRefExpr]",
                        "Type": "Null"
                    },
                    "Operator": "=",
                    "Right Side": {
                        "Text": "MSG_DeQueue(&mAppCbInputQueue)[ImplicitCastExpr]",
                        "Type": "Null"
                    }
                },
                {
                    "Text": "pMsgIn[DeclRefExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "MSG_DeQueue(&mAppCbInputQueue)[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "If(pMsgIn[ImplicitCastExpr])",
                    "Type": "Label"
                },
                {
                    "Text": "If(pMsgIn->handler[ImplicitCastExpr])",
                    "Type": "Label"
                },
                {
                    "Text": "pMsgIn->handler (pMsgIn->param)[CallExpr]",
                    "Type": "Call Expression",
                    "Definition File": "",
                    "Called Function": "",
                    "Arguments": ""
                },
                {
                    "Text": "If End",
                    "Type": "Label"
                },
                {
                    "Text": "Else Start",
                    "Type": "Label"
                },
                {
                    "Text": "Else End",
                    "Type": "Label"
                },
                {
                    "Text": "MSG_Free(pMsgIn)[CallExpr]",
                    "Type": "Call Expression",
                    "Definition File": "D:\/Work\/Projects\/all\/MemManager.h:114:13",
                    "Called Function": "MEM_BufferFree",
                    "Arguments": {
                        "Argument": {
                            "Text": "pMsgIn[ImplicitCastExpr]",
                            "Type": "Null"
                        }
                    }
                },
                {
                    "Text": "pMsgIn[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "pMsgIn = NULL[BinaryOperator]",
                    "Type": "Binary Operator",
                    "Left Side": {
                        "Text": "pMsgIn[DeclRefExpr]",
                        "Type": "Null"
                    },
                    "Operator": "=",
                    "Right Side": {
                        "Text": "NULL[ImplicitCastExpr]",
                        "Type": "Null"
                    }
                },
                {
                    "Text": "pMsgIn[DeclRefExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "NULL[ImplicitCastExpr]",
                    "Type": "Null"
                },
                {
                    "Text": "If End",
                    "Type": "Label"
                },
                {
                    "Text": "Else Start",
                    "Type": "Label"
                },
                {
                    "Text": "Else End",
                    "Type": "Label"
                },
                {
                    "Text": "While End",
                    "Type": "Label"
                },
                {
                    "Text": "If End",
                    "Type": "Label"
                },
                {
                    "Text": "Else Start",
                    "Type": "Label"
                },
                {
                    "Text": "Else End",
                    "Type": "Label"
                },
                {
                    "Text": "If(gUseRtos_c == 0[BinaryOperator])",
                    "Type": "Label"
                },
                {
                    "Text": "break[BreakStmt]",
                    "Type": "Break"
                },
                {
                    "Text": "If End",
                    "Type": "Label"
                },
                {
                    "Text": "Else Start",
                    "Type": "Label"
                },
                {
                    "Text": "Else End",
                    "Type": "Label"
                },
                {
                    "Text": "While End",
                    "Type": "Label"
                }
            ],
            "Branches": [
                {
                    "Name": "Trace_OSA_EventWait.D:\/Work\/Projects\/all\/fsl_os_abstraction.h:495:13",
                    "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:495:13",
                    "Function": "OSA_EventWait",
                    "Statements": [
                        {
                            "Text": "osEventStruct_t* pEventStruct;[DeclStmt]",
                            "Type": "Declaration"
                        },
                        {
                            "Text": "osaStatus_t retVal = osaStatus_Idle;[DeclStmt]",
                            "Type": "Declaration"
                        },
                        {
                            "Text": "If(pSetFlags == NULL[BinaryOperator])",
                            "Type": "Label"
                        },
                        {
                            "Text": "return osaStatus_Error[ReturnStmt]",
                            "Type": "Return"
                        },
                        {
                            "Text": "If End",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else Start",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else End",
                            "Type": "Label"
                        },
                        {
                            "Text": "If(osObjectIsAllocated(&osEventInfo, eventId) == FALSE[BinaryOperator])",
                            "Type": "Label"
                        },
                        {
                            "Text": "return osaStatus_Error[ReturnStmt]",
                            "Type": "Return"
                        },
                        {
                            "Text": "If End",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else Start",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else End",
                            "Type": "Label"
                        },
                        {
                            "Text": "pEventStruct = (osEventStruct_t*)eventId[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "pEventStruct[DeclRefExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "(osEventStruct_t*)eventId[CStyleCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "pEventStruct[DeclRefExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "(osEventStruct_t*)eventId[CStyleCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "OSA_DisableIRQGlobal()[CallExpr]",
                            "Type": "Call Expression",
                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:232:6",
                            "Called Function": "OSA_DisableIRQGlobal",
                            "Arguments": ""
                        },
                        {
                            "Text": "pEventStruct->event.waitingTask = OSA_TaskGetId()[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "pEventStruct->event.waitingTask[MemberExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "OSA_TaskGetId()[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "pEventStruct->event.waitingTask[MemberExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "OSA_TaskGetId()[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "*pSetFlags = pEventStruct->event.flags & flagsToWait[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "*pSetFlags[UnaryOperator]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "pEventStruct->event.flags & flagsToWait[BinaryOperator]",
                                "Type": "Binary Operator",
                                "Left Side": {
                                    "Text": "pEventStruct->event.flags[ImplicitCastExpr]",
                                    "Type": "Null"
                                },
                                "Operator": "&",
                                "Right Side": {
                                    "Text": "flagsToWait[ImplicitCastExpr]",
                                    "Type": "Null"
                                }
                            }
                        },
                        {
                            "Text": "*pSetFlags[UnaryOperator]",
                            "Type": "Null"
                        },
                        {
                            "Text": "pEventStruct->event.flags & flagsToWait[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "pEventStruct->event.flags[ImplicitCastExpr]",
                                "Type": "Null"
                            },
                            "Operator": "&",
                            "Right Side": {
                                "Text": "flagsToWait[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "pEventStruct->event.flags[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "flagsToWait[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "If((((!waitAll) && (*pSetFlags))) || (*pSetFlags == flagsToWait)[BinaryOperator])",
                            "Type": "Label"
                        },
                        {
                            "Text": "If(TRUE == pEventStruct->event.autoClear[BinaryOperator])",
                            "Type": "Label"
                        },
                        {
                            "Text": "pEventStruct->event.flags &= ~flagsToWait[CompoundAssignOperator]",
                            "Type": "Null"
                        },
                        {
                            "Text": "If End",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else Start",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else End",
                            "Type": "Label"
                        },
                        {
                            "Text": "retVal = osaStatus_Success[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "retVal[DeclRefExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "osaStatus_Success[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "retVal[DeclRefExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "osaStatus_Success[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "If End",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else Start",
                            "Type": "Label"
                        },
                        {
                            "Text": "If(0 == millisec[BinaryOperator])",
                            "Type": "Label"
                        },
                        {
                            "Text": "retVal = osaStatus_Timeout[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "retVal[DeclRefExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "osaStatus_Timeout[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "retVal[DeclRefExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "osaStatus_Timeout[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "If End",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else Start",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else End",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else End",
                            "Type": "Label"
                        },
                        {
                            "Text": "OSA_EnableIRQGlobal()[CallExpr]",
                            "Type": "Call Expression",
                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                            "Called Function": "OSA_EnableIRQGlobal",
                            "Arguments": ""
                        },
                        {
                            "Text": "return retVal[ReturnStmt]",
                            "Type": "Return"
                        }
                    ],
                    "Branches": [
                        {
                            "Name": "Trace_OSA_DisableIRQGlobal.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:232:6",
                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:232:6",
                            "Function": "OSA_DisableIRQGlobal",
                            "Statements": [
                                {
                                    "Text": "__disable_irq()[CallExpr]",
                                    "Type": "Call Expression",
                                    "Definition File": "D:\/Work\/Projects\/all\/fsl_common.h:405:5",
                                    "Called Function": "__disable_irq",
                                    "Arguments": ""
                                },
                                {
                                    "Text": "gInterruptDisableCount++[UnaryOperator]",
                                    "Type": "Null"
                                }
                            ],
                            "Branches": [
                                {
                                    "Name": "Trace___disable_irq.D:\/Work\/Projects\/all\/fsl_common.h:405:5",
                                    "File": "D:\/Work\/Projects\/all\/fsl_common.h:405:5",
                                    "Function": "__disable_irq",
                                    "Statements": "",
                                    "Branches": ""
                                }
                            ]
                        },
                        {
                            "Name": "Trace_OSA_EnableIRQGlobal.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                            "Function": "OSA_EnableIRQGlobal",
                            "Statements": [
                                {
                                    "Text": "If(gInterruptDisableCount > 0[BinaryOperator])",
                                    "Type": "Label"
                                },
                                {
                                    "Text": "gInterruptDisableCount--[UnaryOperator]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "If(gInterruptDisableCount == 0[BinaryOperator])",
                                    "Type": "Label"
                                },
                                {
                                    "Text": "__enable_irq()[CallExpr]",
                                    "Type": "Call Expression",
                                    "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                    "Called Function": "__enable_irq",
                                    "Arguments": ""
                                },
                                {
                                    "Text": "If End",
                                    "Type": "Label"
                                },
                                {
                                    "Text": "Else Start",
                                    "Type": "Label"
                                },
                                {
                                    "Text": "Else End",
                                    "Type": "Label"
                                },
                                {
                                    "Text": "If End",
                                    "Type": "Label"
                                },
                                {
                                    "Text": "Else Start",
                                    "Type": "Label"
                                },
                                {
                                    "Text": "Else End",
                                    "Type": "Label"
                                }
                            ],
                            "Branches": [
                                {
                                    "Name": "Trace___enable_irq.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                    "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                    "Function": "__enable_irq",
                                    "Statements": "",
                                    "Branches": ""
                                }
                            ]
                        }
                    ]
                },
                {
                    "Name": "Trace_App_HandleHostMessageInput.D:\/Work\/Projects\/all\/ApplMain.c:229:13",
                    "File": "D:\/Work\/Projects\/all\/ApplMain.c:229:13",
                    "Function": "App_HandleHostMessageInput",
                    "Statements": [
                        {
                            "Text": "Switch Start",
                            "Type": "Label"
                        },
                        {
                            "Text": "Case Start",
                            "Type": "Label"
                        },
                        {
                            "Text": "break[BreakStmt]",
                            "Type": "Break"
                        },
                        {
                            "Text": "Case End",
                            "Type": "Label"
                        },
                        {
                            "Text": "Switch End",
                            "Type": "Label"
                        }
                    ],
                    "Branches": ""
                },
                {
                    "Name": "Trace_MEM_BufferFree.D:\/Work\/Projects\/all\/MemManager.h:114:13",
                    "File": "D:\/Work\/Projects\/all\/MemManager.h:114:13",
                    "Function": "MEM_BufferFree",
                    "Statements": [
                        {
                            "Text": "listHeader_t *pHeader;[DeclStmt]",
                            "Type": "Declaration"
                        },
                        {
                            "Text": "pools_t *pParentPool;[DeclStmt]",
                            "Type": "Declaration"
                        },
                        {
                            "Text": "pools_t *pool;[DeclStmt]",
                            "Type": "Declaration"
                        },
                        {
                            "Text": "If(buffer == NULL[BinaryOperator])",
                            "Type": "Label"
                        },
                        {
                            "Text": "return MEM_FREE_ERROR_c[ReturnStmt]",
                            "Type": "Return"
                        },
                        {
                            "Text": "If End",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else Start",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else End",
                            "Type": "Label"
                        },
                        {
                            "Text": "pHeader = (listHeader_t *)buffer-1[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "pHeader[DeclRefExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "(listHeader_t *)buffer-1[BinaryOperator]",
                                "Type": "Binary Operator",
                                "Left Side": {
                                    "Text": "(listHeader_t *)buffer[CStyleCastExpr]",
                                    "Type": "Null"
                                },
                                "Operator": "-",
                                "Right Side": {
                                    "Text": "1[IntegerLiteral]",
                                    "Type": "Null"
                                }
                            }
                        },
                        {
                            "Text": "pHeader[DeclRefExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "(listHeader_t *)buffer-1[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "(listHeader_t *)buffer[CStyleCastExpr]",
                                "Type": "Null"
                            },
                            "Operator": "-",
                            "Right Side": {
                                "Text": "1[IntegerLiteral]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "(listHeader_t *)buffer[CStyleCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "1[IntegerLiteral]",
                            "Type": "Null"
                        },
                        {
                            "Text": "If(((uint8_t*)pHeader < (uint8_t*)memHeap) || ((uint8_t*)pHeader > ((uint8_t*)memHeap + sizeof(memHeap)))[BinaryOperator])",
                            "Type": "Label"
                        },
                        {
                            "Text": "return MEM_FREE_ERROR_c[ReturnStmt]",
                            "Type": "Return"
                        },
                        {
                            "Text": "If End",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else Start",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else End",
                            "Type": "Label"
                        },
                        {
                            "Text": "OSA_InterruptDisable()[CallExpr]",
                            "Type": "Call Expression",
                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:570:6",
                            "Called Function": "OSA_InterruptDisable",
                            "Arguments": ""
                        },
                        {
                            "Text": "pParentPool = (pools_t *)pHeader->pParentPool[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "pParentPool[DeclRefExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "(pools_t *)pHeader->pParentPool[CStyleCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "pParentPool[DeclRefExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "(pools_t *)pHeader->pParentPool[CStyleCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "pool = memPools[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "pool[DeclRefExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "memPools[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "pool[DeclRefExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "memPools[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "empty",
                            "Type": "Unhandled"
                        },
                        {
                            "Text": "empty",
                            "Type": "Unhandled"
                        },
                        {
                            "Text": "For Start",
                            "Type": "Label"
                        },
                        {
                            "Text": "If(pParentPool == pool[BinaryOperator])",
                            "Type": "Label"
                        },
                        {
                            "Text": "break[BreakStmt]",
                            "Type": "Break"
                        },
                        {
                            "Text": "If End",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else Start",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else End",
                            "Type": "Label"
                        },
                        {
                            "Text": "If(pool->nextBlockSize == 0[BinaryOperator])",
                            "Type": "Label"
                        },
                        {
                            "Text": "OSA_InterruptEnable()[CallExpr]",
                            "Type": "Call Expression",
                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                            "Called Function": "OSA_InterruptEnable",
                            "Arguments": ""
                        },
                        {
                            "Text": "return MEM_FREE_ERROR_c[ReturnStmt]",
                            "Type": "Return"
                        },
                        {
                            "Text": "If End",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else Start",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else End",
                            "Type": "Label"
                        },
                        {
                            "Text": "pool++[UnaryOperator]",
                            "Type": "Null"
                        },
                        {
                            "Text": "empty",
                            "Type": "Unhandled"
                        },
                        {
                            "Text": "For End",
                            "Type": "Label"
                        },
                        {
                            "Text": "If(pHeader->link.list != NULL[BinaryOperator])",
                            "Type": "Label"
                        },
                        {
                            "Text": "OSA_InterruptEnable()[CallExpr]",
                            "Type": "Call Expression",
                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                            "Called Function": "OSA_InterruptEnable",
                            "Arguments": ""
                        },
                        {
                            "Text": "return MEM_FREE_ERROR_c[ReturnStmt]",
                            "Type": "Return"
                        },
                        {
                            "Text": "If End",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else Start",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else End",
                            "Type": "Label"
                        },
                        {
                            "Text": "gFreeMessagesCount++[UnaryOperator]",
                            "Type": "Null"
                        },
                        {
                            "Text": "ListAddTail((listHandle_t)&pParentPool->anchor, (listElementHandle_t)&pHeader->link)[CallExpr]",
                            "Type": "Call Expression",
                            "Definition File": "D:\/Work\/Projects\/all\/GenericList.h:90:14",
                            "Called Function": "ListAddTail",
                            "Arguments": {
                                "Argument": {
                                    "Text": "(listHandle_t)&pParentPool->anchor[CStyleCastExpr]",
                                    "Type": "Null"
                                },
                                "Argument": {
                                    "Text": "(listElementHandle_t)&pHeader->link[CStyleCastExpr]",
                                    "Type": "Null"
                                }
                            }
                        },
                        {
                            "Text": "(listHandle_t)&pParentPool->anchor[CStyleCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "(listElementHandle_t)&pHeader->link[CStyleCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "pParentPool->allocatedBlocks--[UnaryOperator]",
                            "Type": "Null"
                        },
                        {
                            "Text": "OSA_InterruptEnable()[CallExpr]",
                            "Type": "Call Expression",
                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                            "Called Function": "OSA_InterruptEnable",
                            "Arguments": ""
                        },
                        {
                            "Text": "return MEM_SUCCESS_c[ReturnStmt]",
                            "Type": "Return"
                        }
                    ],
                    "Branches": [
                        {
                            "Name": "Trace_OSA_InterruptDisable.D:\/Work\/Projects\/all\/fsl_os_abstraction.h:570:6",
                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:570:6",
                            "Function": "OSA_InterruptDisable",
                            "Statements": [
                                {
                                    "Text": "OSA_DisableIRQGlobal()[CallExpr]",
                                    "Type": "Call Expression",
                                    "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:232:6",
                                    "Called Function": "OSA_DisableIRQGlobal",
                                    "Arguments": ""
                                }
                            ],
                            "Branches": [
                                {
                                    "Name": "Trace_OSA_DisableIRQGlobal.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:232:6",
                                    "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:232:6",
                                    "Function": "OSA_DisableIRQGlobal",
                                    "Statements": [
                                        {
                                            "Text": "__disable_irq()[CallExpr]",
                                            "Type": "Call Expression",
                                            "Definition File": "D:\/Work\/Projects\/all\/fsl_common.h:405:5",
                                            "Called Function": "__disable_irq",
                                            "Arguments": ""
                                        },
                                        {
                                            "Text": "gInterruptDisableCount++[UnaryOperator]",
                                            "Type": "Null"
                                        }
                                    ],
                                    "Branches": [
                                        {
                                            "Name": "Trace___disable_irq.D:\/Work\/Projects\/all\/fsl_common.h:405:5",
                                            "File": "D:\/Work\/Projects\/all\/fsl_common.h:405:5",
                                            "Function": "__disable_irq",
                                            "Statements": "",
                                            "Branches": ""
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "Name": "Trace_OSA_InterruptEnable.D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                            "Function": "OSA_InterruptEnable",
                            "Statements": [
                                {
                                    "Text": "OSA_EnableIRQGlobal()[CallExpr]",
                                    "Type": "Call Expression",
                                    "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                    "Called Function": "OSA_EnableIRQGlobal",
                                    "Arguments": ""
                                }
                            ],
                            "Branches": [
                                {
                                    "Name": "Trace_OSA_EnableIRQGlobal.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                    "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                    "Function": "OSA_EnableIRQGlobal",
                                    "Statements": [
                                        {
                                            "Text": "If(gInterruptDisableCount > 0[BinaryOperator])",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "gInterruptDisableCount--[UnaryOperator]",
                                            "Type": "Null"
                                        },
                                        {
                                            "Text": "If(gInterruptDisableCount == 0[BinaryOperator])",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "__enable_irq()[CallExpr]",
                                            "Type": "Call Expression",
                                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                            "Called Function": "__enable_irq",
                                            "Arguments": ""
                                        },
                                        {
                                            "Text": "If End",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else Start",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else End",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "If End",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else Start",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else End",
                                            "Type": "Label"
                                        }
                                    ],
                                    "Branches": [
                                        {
                                            "Name": "Trace___enable_irq.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                            "Function": "__enable_irq",
                                            "Statements": "",
                                            "Branches": ""
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "Name": "Trace_OSA_InterruptEnable.D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                            "Function": "OSA_InterruptEnable",
                            "Statements": [
                                {
                                    "Text": "OSA_EnableIRQGlobal()[CallExpr]",
                                    "Type": "Call Expression",
                                    "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                    "Called Function": "OSA_EnableIRQGlobal",
                                    "Arguments": ""
                                }
                            ],
                            "Branches": [
                                {
                                    "Name": "Trace_OSA_EnableIRQGlobal.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                    "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                    "Function": "OSA_EnableIRQGlobal",
                                    "Statements": [
                                        {
                                            "Text": "If(gInterruptDisableCount > 0[BinaryOperator])",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "gInterruptDisableCount--[UnaryOperator]",
                                            "Type": "Null"
                                        },
                                        {
                                            "Text": "If(gInterruptDisableCount == 0[BinaryOperator])",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "__enable_irq()[CallExpr]",
                                            "Type": "Call Expression",
                                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                            "Called Function": "__enable_irq",
                                            "Arguments": ""
                                        },
                                        {
                                            "Text": "If End",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else Start",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else End",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "If End",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else Start",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else End",
                                            "Type": "Label"
                                        }
                                    ],
                                    "Branches": [
                                        {
                                            "Name": "Trace___enable_irq.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                            "Function": "__enable_irq",
                                            "Statements": "",
                                            "Branches": ""
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "Name": "Trace_ListAddTail.D:\/Work\/Projects\/all\/GenericList.h:90:14",
                            "File": "D:\/Work\/Projects\/all\/GenericList.h:90:14",
                            "Function": "ListAddTail",
                            "Statements": [
                                {
                                    "Text": "OSA_InterruptDisable()[CallExpr]",
                                    "Type": "Call Expression",
                                    "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:570:6",
                                    "Called Function": "OSA_InterruptDisable",
                                    "Arguments": ""
                                },
                                {
                                    "Text": "If((list->max != 0) && (list->max == list->size)[BinaryOperator])",
                                    "Type": "Label"
                                },
                                {
                                    "Text": "OSA_InterruptEnable()[CallExpr]",
                                    "Type": "Call Expression",
                                    "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                                    "Called Function": "OSA_InterruptEnable",
                                    "Arguments": ""
                                },
                                {
                                    "Text": "return gListFull_c[ReturnStmt]",
                                    "Type": "Return"
                                },
                                {
                                    "Text": "If End",
                                    "Type": "Label"
                                },
                                {
                                    "Text": "Else Start",
                                    "Type": "Label"
                                },
                                {
                                    "Text": "Else End",
                                    "Type": "Label"
                                },
                                {
                                    "Text": "If(list->size == 0[BinaryOperator])",
                                    "Type": "Label"
                                },
                                {
                                    "Text": "list->head = element[BinaryOperator]",
                                    "Type": "Binary Operator",
                                    "Left Side": {
                                        "Text": "list->head[MemberExpr]",
                                        "Type": "Null"
                                    },
                                    "Operator": "=",
                                    "Right Side": {
                                        "Text": "element[ImplicitCastExpr]",
                                        "Type": "Null"
                                    }
                                },
                                {
                                    "Text": "list->head[MemberExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "element[ImplicitCastExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "If End",
                                    "Type": "Label"
                                },
                                {
                                    "Text": "Else Start",
                                    "Type": "Label"
                                },
                                {
                                    "Text": "list->tail->next = element[BinaryOperator]",
                                    "Type": "Binary Operator",
                                    "Left Side": {
                                        "Text": "list->tail->next[MemberExpr]",
                                        "Type": "Null"
                                    },
                                    "Operator": "=",
                                    "Right Side": {
                                        "Text": "element[ImplicitCastExpr]",
                                        "Type": "Null"
                                    }
                                },
                                {
                                    "Text": "list->tail->next[MemberExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "element[ImplicitCastExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "Else End",
                                    "Type": "Label"
                                },
                                {
                                    "Text": "element->prev = list->tail[BinaryOperator]",
                                    "Type": "Binary Operator",
                                    "Left Side": {
                                        "Text": "element->prev[MemberExpr]",
                                        "Type": "Null"
                                    },
                                    "Operator": "=",
                                    "Right Side": {
                                        "Text": "list->tail[ImplicitCastExpr]",
                                        "Type": "Null"
                                    }
                                },
                                {
                                    "Text": "element->prev[MemberExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "list->tail[ImplicitCastExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "element->next = NULL[BinaryOperator]",
                                    "Type": "Binary Operator",
                                    "Left Side": {
                                        "Text": "element->next[MemberExpr]",
                                        "Type": "Null"
                                    },
                                    "Operator": "=",
                                    "Right Side": {
                                        "Text": "NULL[ImplicitCastExpr]",
                                        "Type": "Null"
                                    }
                                },
                                {
                                    "Text": "element->next[MemberExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "NULL[ImplicitCastExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "element->list = list[BinaryOperator]",
                                    "Type": "Binary Operator",
                                    "Left Side": {
                                        "Text": "element->list[MemberExpr]",
                                        "Type": "Null"
                                    },
                                    "Operator": "=",
                                    "Right Side": {
                                        "Text": "list[ImplicitCastExpr]",
                                        "Type": "Null"
                                    }
                                },
                                {
                                    "Text": "element->list[MemberExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "list[ImplicitCastExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "list->tail = element[BinaryOperator]",
                                    "Type": "Binary Operator",
                                    "Left Side": {
                                        "Text": "list->tail[MemberExpr]",
                                        "Type": "Null"
                                    },
                                    "Operator": "=",
                                    "Right Side": {
                                        "Text": "element[ImplicitCastExpr]",
                                        "Type": "Null"
                                    }
                                },
                                {
                                    "Text": "list->tail[MemberExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "element[ImplicitCastExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "list->size++[UnaryOperator]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "OSA_InterruptEnable()[CallExpr]",
                                    "Type": "Call Expression",
                                    "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                                    "Called Function": "OSA_InterruptEnable",
                                    "Arguments": ""
                                },
                                {
                                    "Text": "return gListOk_c[ReturnStmt]",
                                    "Type": "Return"
                                }
                            ],
                            "Branches": [
                                {
                                    "Name": "Trace_OSA_InterruptDisable.D:\/Work\/Projects\/all\/fsl_os_abstraction.h:570:6",
                                    "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:570:6",
                                    "Function": "OSA_InterruptDisable",
                                    "Statements": [
                                        {
                                            "Text": "OSA_DisableIRQGlobal()[CallExpr]",
                                            "Type": "Call Expression",
                                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:232:6",
                                            "Called Function": "OSA_DisableIRQGlobal",
                                            "Arguments": ""
                                        }
                                    ],
                                    "Branches": [
                                        {
                                            "Name": "Trace_OSA_DisableIRQGlobal.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:232:6",
                                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:232:6",
                                            "Function": "OSA_DisableIRQGlobal",
                                            "Statements": [
                                                {
                                                    "Text": "__disable_irq()[CallExpr]",
                                                    "Type": "Call Expression",
                                                    "Definition File": "D:\/Work\/Projects\/all\/fsl_common.h:405:5",
                                                    "Called Function": "__disable_irq",
                                                    "Arguments": ""
                                                },
                                                {
                                                    "Text": "gInterruptDisableCount++[UnaryOperator]",
                                                    "Type": "Null"
                                                }
                                            ],
                                            "Branches": [
                                                {
                                                    "Name": "Trace___disable_irq.D:\/Work\/Projects\/all\/fsl_common.h:405:5",
                                                    "File": "D:\/Work\/Projects\/all\/fsl_common.h:405:5",
                                                    "Function": "__disable_irq",
                                                    "Statements": "",
                                                    "Branches": ""
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Name": "Trace_OSA_InterruptEnable.D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                                    "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                                    "Function": "OSA_InterruptEnable",
                                    "Statements": [
                                        {
                                            "Text": "OSA_EnableIRQGlobal()[CallExpr]",
                                            "Type": "Call Expression",
                                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                            "Called Function": "OSA_EnableIRQGlobal",
                                            "Arguments": ""
                                        }
                                    ],
                                    "Branches": [
                                        {
                                            "Name": "Trace_OSA_EnableIRQGlobal.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                            "Function": "OSA_EnableIRQGlobal",
                                            "Statements": [
                                                {
                                                    "Text": "If(gInterruptDisableCount > 0[BinaryOperator])",
                                                    "Type": "Label"
                                                },
                                                {
                                                    "Text": "gInterruptDisableCount--[UnaryOperator]",
                                                    "Type": "Null"
                                                },
                                                {
                                                    "Text": "If(gInterruptDisableCount == 0[BinaryOperator])",
                                                    "Type": "Label"
                                                },
                                                {
                                                    "Text": "__enable_irq()[CallExpr]",
                                                    "Type": "Call Expression",
                                                    "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                                    "Called Function": "__enable_irq",
                                                    "Arguments": ""
                                                },
                                                {
                                                    "Text": "If End",
                                                    "Type": "Label"
                                                },
                                                {
                                                    "Text": "Else Start",
                                                    "Type": "Label"
                                                },
                                                {
                                                    "Text": "Else End",
                                                    "Type": "Label"
                                                },
                                                {
                                                    "Text": "If End",
                                                    "Type": "Label"
                                                },
                                                {
                                                    "Text": "Else Start",
                                                    "Type": "Label"
                                                },
                                                {
                                                    "Text": "Else End",
                                                    "Type": "Label"
                                                }
                                            ],
                                            "Branches": [
                                                {
                                                    "Name": "Trace___enable_irq.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                                    "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                                    "Function": "__enable_irq",
                                                    "Statements": "",
                                                    "Branches": ""
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Name": "Trace_OSA_InterruptEnable.D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                                    "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                                    "Function": "OSA_InterruptEnable",
                                    "Statements": [
                                        {
                                            "Text": "OSA_EnableIRQGlobal()[CallExpr]",
                                            "Type": "Call Expression",
                                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                            "Called Function": "OSA_EnableIRQGlobal",
                                            "Arguments": ""
                                        }
                                    ],
                                    "Branches": [
                                        {
                                            "Name": "Trace_OSA_EnableIRQGlobal.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                            "Function": "OSA_EnableIRQGlobal",
                                            "Statements": [
                                                {
                                                    "Text": "If(gInterruptDisableCount > 0[BinaryOperator])",
                                                    "Type": "Label"
                                                },
                                                {
                                                    "Text": "gInterruptDisableCount--[UnaryOperator]",
                                                    "Type": "Null"
                                                },
                                                {
                                                    "Text": "If(gInterruptDisableCount == 0[BinaryOperator])",
                                                    "Type": "Label"
                                                },
                                                {
                                                    "Text": "__enable_irq()[CallExpr]",
                                                    "Type": "Call Expression",
                                                    "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                                    "Called Function": "__enable_irq",
                                                    "Arguments": ""
                                                },
                                                {
                                                    "Text": "If End",
                                                    "Type": "Label"
                                                },
                                                {
                                                    "Text": "Else Start",
                                                    "Type": "Label"
                                                },
                                                {
                                                    "Text": "Else End",
                                                    "Type": "Label"
                                                },
                                                {
                                                    "Text": "If End",
                                                    "Type": "Label"
                                                },
                                                {
                                                    "Text": "Else Start",
                                                    "Type": "Label"
                                                },
                                                {
                                                    "Text": "Else End",
                                                    "Type": "Label"
                                                }
                                            ],
                                            "Branches": [
                                                {
                                                    "Name": "Trace___enable_irq.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                                    "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                                    "Function": "__enable_irq",
                                                    "Statements": "",
                                                    "Branches": ""
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "Name": "Trace_OSA_InterruptEnable.D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                            "Function": "OSA_InterruptEnable",
                            "Statements": [
                                {
                                    "Text": "OSA_EnableIRQGlobal()[CallExpr]",
                                    "Type": "Call Expression",
                                    "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                    "Called Function": "OSA_EnableIRQGlobal",
                                    "Arguments": ""
                                }
                            ],
                            "Branches": [
                                {
                                    "Name": "Trace_OSA_EnableIRQGlobal.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                    "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                    "Function": "OSA_EnableIRQGlobal",
                                    "Statements": [
                                        {
                                            "Text": "If(gInterruptDisableCount > 0[BinaryOperator])",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "gInterruptDisableCount--[UnaryOperator]",
                                            "Type": "Null"
                                        },
                                        {
                                            "Text": "If(gInterruptDisableCount == 0[BinaryOperator])",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "__enable_irq()[CallExpr]",
                                            "Type": "Call Expression",
                                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                            "Called Function": "__enable_irq",
                                            "Arguments": ""
                                        },
                                        {
                                            "Text": "If End",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else Start",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else End",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "If End",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else Start",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else End",
                                            "Type": "Label"
                                        }
                                    ],
                                    "Branches": [
                                        {
                                            "Name": "Trace___enable_irq.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                            "Function": "__enable_irq",
                                            "Statements": "",
                                            "Branches": ""
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "Name": "Trace_.",
                    "File": "",
                    "Function": "",
                    "Statements": "",
                    "Branches": ""
                },
                {
                    "Name": "Trace_MEM_BufferFree.D:\/Work\/Projects\/all\/MemManager.h:114:13",
                    "File": "D:\/Work\/Projects\/all\/MemManager.h:114:13",
                    "Function": "MEM_BufferFree",
                    "Statements": [
                        {
                            "Text": "listHeader_t *pHeader;[DeclStmt]",
                            "Type": "Declaration"
                        },
                        {
                            "Text": "pools_t *pParentPool;[DeclStmt]",
                            "Type": "Declaration"
                        },
                        {
                            "Text": "pools_t *pool;[DeclStmt]",
                            "Type": "Declaration"
                        },
                        {
                            "Text": "If(buffer == NULL[BinaryOperator])",
                            "Type": "Label"
                        },
                        {
                            "Text": "return MEM_FREE_ERROR_c[ReturnStmt]",
                            "Type": "Return"
                        },
                        {
                            "Text": "If End",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else Start",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else End",
                            "Type": "Label"
                        },
                        {
                            "Text": "pHeader = (listHeader_t *)buffer-1[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "pHeader[DeclRefExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "(listHeader_t *)buffer-1[BinaryOperator]",
                                "Type": "Binary Operator",
                                "Left Side": {
                                    "Text": "(listHeader_t *)buffer[CStyleCastExpr]",
                                    "Type": "Null"
                                },
                                "Operator": "-",
                                "Right Side": {
                                    "Text": "1[IntegerLiteral]",
                                    "Type": "Null"
                                }
                            }
                        },
                        {
                            "Text": "pHeader[DeclRefExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "(listHeader_t *)buffer-1[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "(listHeader_t *)buffer[CStyleCastExpr]",
                                "Type": "Null"
                            },
                            "Operator": "-",
                            "Right Side": {
                                "Text": "1[IntegerLiteral]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "(listHeader_t *)buffer[CStyleCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "1[IntegerLiteral]",
                            "Type": "Null"
                        },
                        {
                            "Text": "If(((uint8_t*)pHeader < (uint8_t*)memHeap) || ((uint8_t*)pHeader > ((uint8_t*)memHeap + sizeof(memHeap)))[BinaryOperator])",
                            "Type": "Label"
                        },
                        {
                            "Text": "return MEM_FREE_ERROR_c[ReturnStmt]",
                            "Type": "Return"
                        },
                        {
                            "Text": "If End",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else Start",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else End",
                            "Type": "Label"
                        },
                        {
                            "Text": "OSA_InterruptDisable()[CallExpr]",
                            "Type": "Call Expression",
                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:570:6",
                            "Called Function": "OSA_InterruptDisable",
                            "Arguments": ""
                        },
                        {
                            "Text": "pParentPool = (pools_t *)pHeader->pParentPool[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "pParentPool[DeclRefExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "(pools_t *)pHeader->pParentPool[CStyleCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "pParentPool[DeclRefExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "(pools_t *)pHeader->pParentPool[CStyleCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "pool = memPools[BinaryOperator]",
                            "Type": "Binary Operator",
                            "Left Side": {
                                "Text": "pool[DeclRefExpr]",
                                "Type": "Null"
                            },
                            "Operator": "=",
                            "Right Side": {
                                "Text": "memPools[ImplicitCastExpr]",
                                "Type": "Null"
                            }
                        },
                        {
                            "Text": "pool[DeclRefExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "memPools[ImplicitCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "empty",
                            "Type": "Unhandled"
                        },
                        {
                            "Text": "empty",
                            "Type": "Unhandled"
                        },
                        {
                            "Text": "For Start",
                            "Type": "Label"
                        },
                        {
                            "Text": "If(pParentPool == pool[BinaryOperator])",
                            "Type": "Label"
                        },
                        {
                            "Text": "break[BreakStmt]",
                            "Type": "Break"
                        },
                        {
                            "Text": "If End",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else Start",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else End",
                            "Type": "Label"
                        },
                        {
                            "Text": "If(pool->nextBlockSize == 0[BinaryOperator])",
                            "Type": "Label"
                        },
                        {
                            "Text": "OSA_InterruptEnable()[CallExpr]",
                            "Type": "Call Expression",
                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                            "Called Function": "OSA_InterruptEnable",
                            "Arguments": ""
                        },
                        {
                            "Text": "return MEM_FREE_ERROR_c[ReturnStmt]",
                            "Type": "Return"
                        },
                        {
                            "Text": "If End",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else Start",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else End",
                            "Type": "Label"
                        },
                        {
                            "Text": "pool++[UnaryOperator]",
                            "Type": "Null"
                        },
                        {
                            "Text": "empty",
                            "Type": "Unhandled"
                        },
                        {
                            "Text": "For End",
                            "Type": "Label"
                        },
                        {
                            "Text": "If(pHeader->link.list != NULL[BinaryOperator])",
                            "Type": "Label"
                        },
                        {
                            "Text": "OSA_InterruptEnable()[CallExpr]",
                            "Type": "Call Expression",
                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                            "Called Function": "OSA_InterruptEnable",
                            "Arguments": ""
                        },
                        {
                            "Text": "return MEM_FREE_ERROR_c[ReturnStmt]",
                            "Type": "Return"
                        },
                        {
                            "Text": "If End",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else Start",
                            "Type": "Label"
                        },
                        {
                            "Text": "Else End",
                            "Type": "Label"
                        },
                        {
                            "Text": "gFreeMessagesCount++[UnaryOperator]",
                            "Type": "Null"
                        },
                        {
                            "Text": "ListAddTail((listHandle_t)&pParentPool->anchor, (listElementHandle_t)&pHeader->link)[CallExpr]",
                            "Type": "Call Expression",
                            "Definition File": "D:\/Work\/Projects\/all\/GenericList.h:90:14",
                            "Called Function": "ListAddTail",
                            "Arguments": {
                                "Argument": {
                                    "Text": "(listHandle_t)&pParentPool->anchor[CStyleCastExpr]",
                                    "Type": "Null"
                                },
                                "Argument": {
                                    "Text": "(listElementHandle_t)&pHeader->link[CStyleCastExpr]",
                                    "Type": "Null"
                                }
                            }
                        },
                        {
                            "Text": "(listHandle_t)&pParentPool->anchor[CStyleCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "(listElementHandle_t)&pHeader->link[CStyleCastExpr]",
                            "Type": "Null"
                        },
                        {
                            "Text": "pParentPool->allocatedBlocks--[UnaryOperator]",
                            "Type": "Null"
                        },
                        {
                            "Text": "OSA_InterruptEnable()[CallExpr]",
                            "Type": "Call Expression",
                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                            "Called Function": "OSA_InterruptEnable",
                            "Arguments": ""
                        },
                        {
                            "Text": "return MEM_SUCCESS_c[ReturnStmt]",
                            "Type": "Return"
                        }
                    ],
                    "Branches": [
                        {
                            "Name": "Trace_OSA_InterruptDisable.D:\/Work\/Projects\/all\/fsl_os_abstraction.h:570:6",
                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:570:6",
                            "Function": "OSA_InterruptDisable",
                            "Statements": [
                                {
                                    "Text": "OSA_DisableIRQGlobal()[CallExpr]",
                                    "Type": "Call Expression",
                                    "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:232:6",
                                    "Called Function": "OSA_DisableIRQGlobal",
                                    "Arguments": ""
                                }
                            ],
                            "Branches": [
                                {
                                    "Name": "Trace_OSA_DisableIRQGlobal.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:232:6",
                                    "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:232:6",
                                    "Function": "OSA_DisableIRQGlobal",
                                    "Statements": [
                                        {
                                            "Text": "__disable_irq()[CallExpr]",
                                            "Type": "Call Expression",
                                            "Definition File": "D:\/Work\/Projects\/all\/fsl_common.h:405:5",
                                            "Called Function": "__disable_irq",
                                            "Arguments": ""
                                        },
                                        {
                                            "Text": "gInterruptDisableCount++[UnaryOperator]",
                                            "Type": "Null"
                                        }
                                    ],
                                    "Branches": [
                                        {
                                            "Name": "Trace___disable_irq.D:\/Work\/Projects\/all\/fsl_common.h:405:5",
                                            "File": "D:\/Work\/Projects\/all\/fsl_common.h:405:5",
                                            "Function": "__disable_irq",
                                            "Statements": "",
                                            "Branches": ""
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "Name": "Trace_OSA_InterruptEnable.D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                            "Function": "OSA_InterruptEnable",
                            "Statements": [
                                {
                                    "Text": "OSA_EnableIRQGlobal()[CallExpr]",
                                    "Type": "Call Expression",
                                    "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                    "Called Function": "OSA_EnableIRQGlobal",
                                    "Arguments": ""
                                }
                            ],
                            "Branches": [
                                {
                                    "Name": "Trace_OSA_EnableIRQGlobal.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                    "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                    "Function": "OSA_EnableIRQGlobal",
                                    "Statements": [
                                        {
                                            "Text": "If(gInterruptDisableCount > 0[BinaryOperator])",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "gInterruptDisableCount--[UnaryOperator]",
                                            "Type": "Null"
                                        },
                                        {
                                            "Text": "If(gInterruptDisableCount == 0[BinaryOperator])",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "__enable_irq()[CallExpr]",
                                            "Type": "Call Expression",
                                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                            "Called Function": "__enable_irq",
                                            "Arguments": ""
                                        },
                                        {
                                            "Text": "If End",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else Start",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else End",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "If End",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else Start",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else End",
                                            "Type": "Label"
                                        }
                                    ],
                                    "Branches": [
                                        {
                                            "Name": "Trace___enable_irq.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                            "Function": "__enable_irq",
                                            "Statements": "",
                                            "Branches": ""
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "Name": "Trace_OSA_InterruptEnable.D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                            "Function": "OSA_InterruptEnable",
                            "Statements": [
                                {
                                    "Text": "OSA_EnableIRQGlobal()[CallExpr]",
                                    "Type": "Call Expression",
                                    "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                    "Called Function": "OSA_EnableIRQGlobal",
                                    "Arguments": ""
                                }
                            ],
                            "Branches": [
                                {
                                    "Name": "Trace_OSA_EnableIRQGlobal.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                    "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                    "Function": "OSA_EnableIRQGlobal",
                                    "Statements": [
                                        {
                                            "Text": "If(gInterruptDisableCount > 0[BinaryOperator])",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "gInterruptDisableCount--[UnaryOperator]",
                                            "Type": "Null"
                                        },
                                        {
                                            "Text": "If(gInterruptDisableCount == 0[BinaryOperator])",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "__enable_irq()[CallExpr]",
                                            "Type": "Call Expression",
                                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                            "Called Function": "__enable_irq",
                                            "Arguments": ""
                                        },
                                        {
                                            "Text": "If End",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else Start",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else End",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "If End",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else Start",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else End",
                                            "Type": "Label"
                                        }
                                    ],
                                    "Branches": [
                                        {
                                            "Name": "Trace___enable_irq.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                            "Function": "__enable_irq",
                                            "Statements": "",
                                            "Branches": ""
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "Name": "Trace_ListAddTail.D:\/Work\/Projects\/all\/GenericList.h:90:14",
                            "File": "D:\/Work\/Projects\/all\/GenericList.h:90:14",
                            "Function": "ListAddTail",
                            "Statements": [
                                {
                                    "Text": "OSA_InterruptDisable()[CallExpr]",
                                    "Type": "Call Expression",
                                    "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:570:6",
                                    "Called Function": "OSA_InterruptDisable",
                                    "Arguments": ""
                                },
                                {
                                    "Text": "If((list->max != 0) && (list->max == list->size)[BinaryOperator])",
                                    "Type": "Label"
                                },
                                {
                                    "Text": "OSA_InterruptEnable()[CallExpr]",
                                    "Type": "Call Expression",
                                    "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                                    "Called Function": "OSA_InterruptEnable",
                                    "Arguments": ""
                                },
                                {
                                    "Text": "return gListFull_c[ReturnStmt]",
                                    "Type": "Return"
                                },
                                {
                                    "Text": "If End",
                                    "Type": "Label"
                                },
                                {
                                    "Text": "Else Start",
                                    "Type": "Label"
                                },
                                {
                                    "Text": "Else End",
                                    "Type": "Label"
                                },
                                {
                                    "Text": "If(list->size == 0[BinaryOperator])",
                                    "Type": "Label"
                                },
                                {
                                    "Text": "list->head = element[BinaryOperator]",
                                    "Type": "Binary Operator",
                                    "Left Side": {
                                        "Text": "list->head[MemberExpr]",
                                        "Type": "Null"
                                    },
                                    "Operator": "=",
                                    "Right Side": {
                                        "Text": "element[ImplicitCastExpr]",
                                        "Type": "Null"
                                    }
                                },
                                {
                                    "Text": "list->head[MemberExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "element[ImplicitCastExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "If End",
                                    "Type": "Label"
                                },
                                {
                                    "Text": "Else Start",
                                    "Type": "Label"
                                },
                                {
                                    "Text": "list->tail->next = element[BinaryOperator]",
                                    "Type": "Binary Operator",
                                    "Left Side": {
                                        "Text": "list->tail->next[MemberExpr]",
                                        "Type": "Null"
                                    },
                                    "Operator": "=",
                                    "Right Side": {
                                        "Text": "element[ImplicitCastExpr]",
                                        "Type": "Null"
                                    }
                                },
                                {
                                    "Text": "list->tail->next[MemberExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "element[ImplicitCastExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "Else End",
                                    "Type": "Label"
                                },
                                {
                                    "Text": "element->prev = list->tail[BinaryOperator]",
                                    "Type": "Binary Operator",
                                    "Left Side": {
                                        "Text": "element->prev[MemberExpr]",
                                        "Type": "Null"
                                    },
                                    "Operator": "=",
                                    "Right Side": {
                                        "Text": "list->tail[ImplicitCastExpr]",
                                        "Type": "Null"
                                    }
                                },
                                {
                                    "Text": "element->prev[MemberExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "list->tail[ImplicitCastExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "element->next = NULL[BinaryOperator]",
                                    "Type": "Binary Operator",
                                    "Left Side": {
                                        "Text": "element->next[MemberExpr]",
                                        "Type": "Null"
                                    },
                                    "Operator": "=",
                                    "Right Side": {
                                        "Text": "NULL[ImplicitCastExpr]",
                                        "Type": "Null"
                                    }
                                },
                                {
                                    "Text": "element->next[MemberExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "NULL[ImplicitCastExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "element->list = list[BinaryOperator]",
                                    "Type": "Binary Operator",
                                    "Left Side": {
                                        "Text": "element->list[MemberExpr]",
                                        "Type": "Null"
                                    },
                                    "Operator": "=",
                                    "Right Side": {
                                        "Text": "list[ImplicitCastExpr]",
                                        "Type": "Null"
                                    }
                                },
                                {
                                    "Text": "element->list[MemberExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "list[ImplicitCastExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "list->tail = element[BinaryOperator]",
                                    "Type": "Binary Operator",
                                    "Left Side": {
                                        "Text": "list->tail[MemberExpr]",
                                        "Type": "Null"
                                    },
                                    "Operator": "=",
                                    "Right Side": {
                                        "Text": "element[ImplicitCastExpr]",
                                        "Type": "Null"
                                    }
                                },
                                {
                                    "Text": "list->tail[MemberExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "element[ImplicitCastExpr]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "list->size++[UnaryOperator]",
                                    "Type": "Null"
                                },
                                {
                                    "Text": "OSA_InterruptEnable()[CallExpr]",
                                    "Type": "Call Expression",
                                    "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                                    "Called Function": "OSA_InterruptEnable",
                                    "Arguments": ""
                                },
                                {
                                    "Text": "return gListOk_c[ReturnStmt]",
                                    "Type": "Return"
                                }
                            ],
                            "Branches": [
                                {
                                    "Name": "Trace_OSA_InterruptDisable.D:\/Work\/Projects\/all\/fsl_os_abstraction.h:570:6",
                                    "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:570:6",
                                    "Function": "OSA_InterruptDisable",
                                    "Statements": [
                                        {
                                            "Text": "OSA_DisableIRQGlobal()[CallExpr]",
                                            "Type": "Call Expression",
                                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:232:6",
                                            "Called Function": "OSA_DisableIRQGlobal",
                                            "Arguments": ""
                                        }
                                    ],
                                    "Branches": [
                                        {
                                            "Name": "Trace_OSA_DisableIRQGlobal.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:232:6",
                                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:232:6",
                                            "Function": "OSA_DisableIRQGlobal",
                                            "Statements": [
                                                {
                                                    "Text": "__disable_irq()[CallExpr]",
                                                    "Type": "Call Expression",
                                                    "Definition File": "D:\/Work\/Projects\/all\/fsl_common.h:405:5",
                                                    "Called Function": "__disable_irq",
                                                    "Arguments": ""
                                                },
                                                {
                                                    "Text": "gInterruptDisableCount++[UnaryOperator]",
                                                    "Type": "Null"
                                                }
                                            ],
                                            "Branches": [
                                                {
                                                    "Name": "Trace___disable_irq.D:\/Work\/Projects\/all\/fsl_common.h:405:5",
                                                    "File": "D:\/Work\/Projects\/all\/fsl_common.h:405:5",
                                                    "Function": "__disable_irq",
                                                    "Statements": "",
                                                    "Branches": ""
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Name": "Trace_OSA_InterruptEnable.D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                                    "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                                    "Function": "OSA_InterruptEnable",
                                    "Statements": [
                                        {
                                            "Text": "OSA_EnableIRQGlobal()[CallExpr]",
                                            "Type": "Call Expression",
                                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                            "Called Function": "OSA_EnableIRQGlobal",
                                            "Arguments": ""
                                        }
                                    ],
                                    "Branches": [
                                        {
                                            "Name": "Trace_OSA_EnableIRQGlobal.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                            "Function": "OSA_EnableIRQGlobal",
                                            "Statements": [
                                                {
                                                    "Text": "If(gInterruptDisableCount > 0[BinaryOperator])",
                                                    "Type": "Label"
                                                },
                                                {
                                                    "Text": "gInterruptDisableCount--[UnaryOperator]",
                                                    "Type": "Null"
                                                },
                                                {
                                                    "Text": "If(gInterruptDisableCount == 0[BinaryOperator])",
                                                    "Type": "Label"
                                                },
                                                {
                                                    "Text": "__enable_irq()[CallExpr]",
                                                    "Type": "Call Expression",
                                                    "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                                    "Called Function": "__enable_irq",
                                                    "Arguments": ""
                                                },
                                                {
                                                    "Text": "If End",
                                                    "Type": "Label"
                                                },
                                                {
                                                    "Text": "Else Start",
                                                    "Type": "Label"
                                                },
                                                {
                                                    "Text": "Else End",
                                                    "Type": "Label"
                                                },
                                                {
                                                    "Text": "If End",
                                                    "Type": "Label"
                                                },
                                                {
                                                    "Text": "Else Start",
                                                    "Type": "Label"
                                                },
                                                {
                                                    "Text": "Else End",
                                                    "Type": "Label"
                                                }
                                            ],
                                            "Branches": [
                                                {
                                                    "Name": "Trace___enable_irq.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                                    "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                                    "Function": "__enable_irq",
                                                    "Statements": "",
                                                    "Branches": ""
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Name": "Trace_OSA_InterruptEnable.D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                                    "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                                    "Function": "OSA_InterruptEnable",
                                    "Statements": [
                                        {
                                            "Text": "OSA_EnableIRQGlobal()[CallExpr]",
                                            "Type": "Call Expression",
                                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                            "Called Function": "OSA_EnableIRQGlobal",
                                            "Arguments": ""
                                        }
                                    ],
                                    "Branches": [
                                        {
                                            "Name": "Trace_OSA_EnableIRQGlobal.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                            "Function": "OSA_EnableIRQGlobal",
                                            "Statements": [
                                                {
                                                    "Text": "If(gInterruptDisableCount > 0[BinaryOperator])",
                                                    "Type": "Label"
                                                },
                                                {
                                                    "Text": "gInterruptDisableCount--[UnaryOperator]",
                                                    "Type": "Null"
                                                },
                                                {
                                                    "Text": "If(gInterruptDisableCount == 0[BinaryOperator])",
                                                    "Type": "Label"
                                                },
                                                {
                                                    "Text": "__enable_irq()[CallExpr]",
                                                    "Type": "Call Expression",
                                                    "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                                    "Called Function": "__enable_irq",
                                                    "Arguments": ""
                                                },
                                                {
                                                    "Text": "If End",
                                                    "Type": "Label"
                                                },
                                                {
                                                    "Text": "Else Start",
                                                    "Type": "Label"
                                                },
                                                {
                                                    "Text": "Else End",
                                                    "Type": "Label"
                                                },
                                                {
                                                    "Text": "If End",
                                                    "Type": "Label"
                                                },
                                                {
                                                    "Text": "Else Start",
                                                    "Type": "Label"
                                                },
                                                {
                                                    "Text": "Else End",
                                                    "Type": "Label"
                                                }
                                            ],
                                            "Branches": [
                                                {
                                                    "Name": "Trace___enable_irq.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                                    "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                                    "Function": "__enable_irq",
                                                    "Statements": "",
                                                    "Branches": ""
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "Name": "Trace_OSA_InterruptEnable.D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction.h:565:6",
                            "Function": "OSA_InterruptEnable",
                            "Statements": [
                                {
                                    "Text": "OSA_EnableIRQGlobal()[CallExpr]",
                                    "Type": "Call Expression",
                                    "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                    "Called Function": "OSA_EnableIRQGlobal",
                                    "Arguments": ""
                                }
                            ],
                            "Branches": [
                                {
                                    "Name": "Trace_OSA_EnableIRQGlobal.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                    "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:212:6",
                                    "Function": "OSA_EnableIRQGlobal",
                                    "Statements": [
                                        {
                                            "Text": "If(gInterruptDisableCount > 0[BinaryOperator])",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "gInterruptDisableCount--[UnaryOperator]",
                                            "Type": "Null"
                                        },
                                        {
                                            "Text": "If(gInterruptDisableCount == 0[BinaryOperator])",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "__enable_irq()[CallExpr]",
                                            "Type": "Call Expression",
                                            "Definition File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                            "Called Function": "__enable_irq",
                                            "Arguments": ""
                                        },
                                        {
                                            "Text": "If End",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else Start",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else End",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "If End",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else Start",
                                            "Type": "Label"
                                        },
                                        {
                                            "Text": "Else End",
                                            "Type": "Label"
                                        }
                                    ],
                                    "Branches": [
                                        {
                                            "Name": "Trace___enable_irq.D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                            "File": "D:\/Work\/Projects\/all\/fsl_os_abstraction_bm.c:220:7",
                                            "Function": "__enable_irq",
                                            "Statements": "",
                                            "Branches": ""
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}
